<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss
  version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Examples on NoSheet</title>
    <link>http://localhost:1313/noSheetWebsite/examples/</link>
    <description>Recent content in Examples on NoSheet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Jun 2025 19:09:31 +0100</lastBuildDate><atom:link href="http://localhost:1313/noSheetWebsite/examples/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Example 1 - A Simple Quote Calculator</title>
      <link>http://localhost:1313/noSheetWebsite/examples/example-1/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/examples/example-1/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;/noSheetWebsite/js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: lineitems} = await import(&#39;/noSheetWebsite/js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;/noSheetWebsite/js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;unit_cost&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], lineitems);&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;        new_table.calculate();&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;items-left&#34;&gt;&#xD;&#xA;            &lt;p&gt;This table is calculated using the &lt;a href=&#34;#lineitems&#34;&gt;lineitems&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[<script>
const SUM = formulajs.SUM;

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('/noSheetWebsite/js/nosheet.min.mjs');

        //the facets
        const {default: lineitems} = await import('/noSheetWebsite/js/examples/facets/lineitems.mjs');

        //the data
        const response = await fetch('/noSheetWebsite/js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'unit_cost', 'unit_offer', 'quantity'], lineitems);

        //
        //populate the table
        //
        new_table.load(data);
        new_table.calculate();

        resolve( new_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <div class="items-left">
            <p>This table is calculated using the <a href="#lineitems">lineitems</a> facet</p>
            <p>The <a href="#lineitems">lineitems</a> facet contains formulas that calculate the <code>Line Cost</code> and <code>Line Offer</code> cells for each row as well as the aggregate values <code>total_cost</code>, <code>total_offer</code> and <code>profit</code> that are displayed at the bottom of the table</p>
        </div>

        <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th class="w-2/6 px-4 py-2 text-left">Item</th>
                        <th class="px-4 py-2">Item Cost</th>
                        <th class="px-4 py-2">Unit Price</th>
                        <th class="px-4 py-2">Quantity</th>
                        <th class="px-4 py-2">Line Cost</th>
                        <th class="px-4 py-2">Line Offer</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, index) in items" :key="index">
                        <tr :id="`${storeId}-row[${index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column, column_index) in Array(6)">
                                <td class="py-3" :id="`${storeId}_cell[${index}][${column_index}]`">

                                    <template x-if="column_index > 0 && column_index <= 3">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="column_index >= 4">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[index] may be 'undefined' -->
                                        <div x-text="item[column_index]" x-init="$watch('calculationTick', _ => $el.innerHTML = items[index]?.[column_index])" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="value" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>
                    <tr class="border-t-4 text-gray-800">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>

                </tfoot>
            </table>

            <div>
                <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
                <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
            </div>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>            
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_cost&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">lineitems</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">new_table</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span></span></span></code></pre></div>          
<h3 id="lineitems">The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
            
        </div>

    </div>
</div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Example 2 - Multiple Facets &amp; References</title>
      <link>http://localhost:1313/noSheetWebsite/examples/example-2/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/examples/example-2/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;/noSheetWebsite/js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials} = await import(&#39;/noSheetWebsite/js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}     = await import(&#39;/noSheetWebsite/js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}  = await import(&#39;/noSheetWebsite/js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;/noSheetWebsite/js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.&#xD;&#xA;        //Here we set average_steel_cost_m2 to be a constant&#xD;&#xA;        //manufacturing_cost_per_m2 is set dynamically using Alpine&#xD;&#xA;        new_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = 0.2;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theTable.getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theTable.getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        theTable.calculate();        &#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;    &lt;h2&gt;Extending the Simple Quote Calculator with additional facets&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;    &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-left w-full&#34;&gt;&#xD;&#xA;        &lt;div class=&#34;flex px-4 py-2&#34;&gt;&#xD;&#xA;            &lt;div&gt;&#xD;&#xA;                &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[
<script>
const SUM = formulajs.SUM;
var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('/noSheetWebsite/js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials} = await import('/noSheetWebsite/js/examples/facets/raw_materials.mjs');
        const {default: lineitems}     = await import('/noSheetWebsite/js/examples/facets/lineitems.mjs');
        const {default: gross_margin}  = await import('/noSheetWebsite/js/examples/facets/gross_margin.mjs');        

        //the data
        const response = await fetch('/noSheetWebsite/js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'steel_m2', 'unit_offer', 'quantity'], raw_materials, lineitems, gross_margin);

        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
        //Here we set average_steel_cost_m2 to be a constant
        //manufacturing_cost_per_m2 is set dynamically using Alpine
        new_table.setReferences( function() {

            this.average_steel_cost_m2 = 0.2;
        });    

        //
        //populate the table
        //
        new_table.load(data);

        resolve( new_table );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        Alpine.store('low_margin_threshold', theTable.getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theTable.getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        theTable.calculate();        

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

    <h2>Extending the Simple Quote Calculator with additional facets</h2>

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4 py-2">
            <div>
                <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
            </div>
        </div>

        <div class="flex px-4 py-2">
            <div>
                <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
            </div>
        </div>
    </div>     

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4">
            <div>
                <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                <label for="Manufacturing_Cost">per m<sup>2</sup></label>
            </div>
        </div>

        <div class="flex px-4">
            <div>
                <label for="Margin_Threshold">Margin Threshold:</label>
                <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
            </div>
        </div>
    </div>        

    <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
        <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
            <thead class="border-b-2">
                <tr class="text-center">
                    <th x-init="columns.push('item')" class="w-2/6 px-4 py-2 text-left">Item</th>
                    <th x-init="columns.push('steel_m2')" class="px-4 py-2">Steel m<sup>2</sup></th>
                    <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                    <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                    <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                    <th x-init="columns.push('line_cost')" class="px-4 py-2">Line Cost</th>
                    <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                    <th x-init="columns.push('gross_margin')" class="px-4 py-2">Gross Margin</th>
                </tr>    
            </thead>
            <tbody>
                <template x-for="(item, row_index) in items" :key="row_index">
                    <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                        <template x-for="(column_name, html_column_index) in columns">
                            <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                <template x-if="[1,2,3].includes(column_index)">
                                    <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                </template>
                                
                                <template x-if="!column_index">
                                    <!--Don't update on calculation-->
                                    <span x-text="item[column_index]"></span>                                            
                                </template>                                        

                                <template x-if="[4,5,6].includes(column_index)">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                </template>                                        

                                <template x-if="column_index == 7">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                </template>                                        

                            </td>
                        </template>
                    </tr>
                </template>
                <tr x-show="isEmpty">
                    <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                </tr>
            </tbody>
            <tfoot class="border-t-4 text-gray-800">    
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>
                        <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th></th>
                </tr>
                <tr class="border-t-4 text-gray-800">
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Profit:</th>
                    <th>
                        <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                            <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                        </span>
                    </th>
                </tr>

            </tfoot>
        </table>

        <div>
            <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
            <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
        </div>
    </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span>    <span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span>    <span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>    <span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="c1">//The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>    <span class="c1">//Here we set average_steel_cost_m2 to be a constant
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span>    <span class="c1">//manufacturing_cost_per_m2 is set dynamically using Alpine    
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">});</span>    
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span>    <span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span></span></span></code></pre></div>
<h3 id="raw_materials">The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="gross_margin">The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Example 3 - Stacks, Consolidation &amp; References</title>
      <link>http://localhost:1313/noSheetWebsite/examples/example-3/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/examples/example-3/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM     = formulajs.SUM,&#xD;&#xA;      AVERAGE = formulajs.AVERAGE;&#xD;&#xA;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;/noSheetWebsite/js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials}   = await import(&#39;/noSheetWebsite/js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}       = await import(&#39;/noSheetWebsite/js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}    = await import(&#39;/noSheetWebsite/js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;        const {default: steel_suppliers} = await import(&#39;/noSheetWebsite/js/examples/facets/steel_suppliers.mjs&#39;);        &#xD;&#xA;        const {default: consolidation}   = await import(&#39;/noSheetWebsite/js/examples/facets/consolidation.mjs&#39;);    &#xD;&#xA;&#xD;&#xA;        //load the data&#xD;&#xA;        const data1 = await loadJSON(&#39;/noSheetWebsite/js/examples/data/example_1.json&#39;),&#xD;&#xA;              data2 = await loadJSON(&#39;/noSheetWebsite/js/examples/data/example_3_site_2.json&#39;),&#xD;&#xA;              data3 = await loadJSON(&#39;/noSheetWebsite/js/examples/data/example_3_site_3.json&#39;),&#xD;&#xA;              data4 = await loadJSON(&#39;/noSheetWebsite/js/examples/data/example_3_steel_suppliers.json&#39;); &#xD;&#xA;        &#xD;&#xA;        //&#xD;&#xA;        //create and define the stack, which acts as a table factory and allows us to use consolidation facets&#xD;&#xA;        //        &#xD;&#xA;        let stack = defineStack(&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;),&#xD;&#xA;            site_1 = stack.createTable(&#39;site1&#39;),&#xD;&#xA;            site_2 = stack.createTable(&#39;site2&#39;),&#xD;&#xA;            site_3 = stack.createTable(&#39;site3&#39;);&#xD;&#xA;&#xD;&#xA;        //set the facets used by the stack&#xD;&#xA;        stack.addFacets(raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //set a consolidation facet&#xD;&#xA;        stack.consolidate(consolidation);            &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the tables&#xD;&#xA;        //&#xD;&#xA;        site_1.load(data1);&#xD;&#xA;        site_2.load(data2);&#xD;&#xA;        site_3.load(data3);&#xD;&#xA;&#xD;&#xA;        //Create a table for the steel suppliers&#xD;&#xA;        let suppliers = createTable([&#39;supplier&#39;, &#39;steel_m2&#39;, &#39;transport_m2&#39;], steel_suppliers);&#xD;&#xA;&#xD;&#xA;        //load and calculate&#xD;&#xA;        suppliers.load(data4);&#xD;&#xA;        suppliers.calculate();&#xD;&#xA;&#xD;&#xA;        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use&#xD;&#xA;        //the average_cost_per_m2 aggregate from the suppliers table&#xD;&#xA;        stack.setDefaultReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;&#xD;&#xA;        });  &#xD;&#xA;&#xD;&#xA;        resolve( [stack, site_1, site_2, site_3, suppliers] );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;let unavailable = Symbol(&#39;unavailable&#39;);&#xD;&#xA;&#xD;&#xA;function ifAvailable(obj, fn){&#xD;&#xA;&#xD;&#xA;    let isAvailable = obj !== unavailable;&#xD;&#xA;&#xD;&#xA;    return fn &amp;&amp; isAvailable ? fn(obj) : isAvailable;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    Alpine.data(&#39;consolidation&#39;, (name, formatter) =&gt; ({&#xD;&#xA;&#xD;&#xA;        init(){&#xD;&#xA;            //watch the store&#xD;&#xA;            this.$watch(`$store.consolidated`,(new_value, old_value)=&gt;{           &#xD;&#xA;    &#xD;&#xA;                this.calculatedValue = Alpine.store(&#39;siteStack&#39;)[name].valueOf();&#xD;&#xA;            });                &#xD;&#xA;        },&#xD;&#xA;&#xD;&#xA;        calculatedValue: undefined,&#xD;&#xA;&#xD;&#xA;        get value() {&#xD;&#xA;&#xD;&#xA;            let v = this.calculatedValue ?? Alpine.store(&#39;siteStack&#39;)[name]?.valueOf();&#xD;&#xA;&#xD;&#xA;            return !formatter ? v : formatter.format(v);&#xD;&#xA;        },        &#xD;&#xA;    }));&#xD;&#xA;&#xD;&#xA;    Alpine.store(&#39;steelSuppliers&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;activeTable&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;siteStack&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;consolidated&#39;, 0);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //Define some reference handles&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theStack.tables().getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theStack.tables().getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        //set the consolidation refernces to mirror the table consolidation handle&#xD;&#xA;        theStack.setConsolidationReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.low_margin_threshold = Alpine.store(&#39;low_margin_threshold&#39;).value;&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //increment the consolidation tick to force UI update&#xD;&#xA;        theStack.afterConsolidation( _ =&gt; {&#xD;&#xA;            Alpine.store(&#39;consolidated&#39;, Alpine.store(&#39;consolidated&#39;) + 1);&#xD;&#xA;         });&#xD;&#xA;&#xD;&#xA;        theStack.tables().calculate();    &#xD;&#xA;&#xD;&#xA;        //update the store with the init&#39;d objects&#xD;&#xA;        Alpine.store(&#39;siteStack&#39;, theStack);&#xD;&#xA;        Alpine.store(&#39;activeTable&#39;, site1);&#xD;&#xA;        Alpine.store(&#39;steelSuppliers&#39;, suppliers);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34; x-data=&#34;{tab: 0}&#34; x-effect=&#34;ifAvailable($store.siteStack, _ =&gt; Alpine.store(&#39;activeTable&#39;, $store.siteStack.getUniqueTable(`site${tab+1}`)))&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Extending the Quote Calculator to handle multiple sites and multiple suppliers&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;grid grid-cols-2 gap-4 items-start justify-center w-full&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                &lt;div&gt;&#xD;&#xA;                    &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[
<script>
const SUM     = formulajs.SUM,
      AVERAGE = formulajs.AVERAGE;

var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('/noSheetWebsite/js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials}   = await import('/noSheetWebsite/js/examples/facets/raw_materials.mjs');
        const {default: lineitems}       = await import('/noSheetWebsite/js/examples/facets/lineitems.mjs');
        const {default: gross_margin}    = await import('/noSheetWebsite/js/examples/facets/gross_margin.mjs');        
        const {default: steel_suppliers} = await import('/noSheetWebsite/js/examples/facets/steel_suppliers.mjs');        
        const {default: consolidation}   = await import('/noSheetWebsite/js/examples/facets/consolidation.mjs');    

        //load the data
        const data1 = await loadJSON('/noSheetWebsite/js/examples/data/example_1.json'),
              data2 = await loadJSON('/noSheetWebsite/js/examples/data/example_3_site_2.json'),
              data3 = await loadJSON('/noSheetWebsite/js/examples/data/example_3_site_3.json'),
              data4 = await loadJSON('/noSheetWebsite/js/examples/data/example_3_steel_suppliers.json'); 
        
        //
        //create and define the stack, which acts as a table factory and allows us to use consolidation facets
        //        
        let stack = defineStack('item', 'steel_m2', 'unit_offer', 'quantity'),
            site_1 = stack.createTable('site1'),
            site_2 = stack.createTable('site2'),
            site_3 = stack.createTable('site3');

        //set the facets used by the stack
        stack.addFacets(raw_materials, lineitems, gross_margin);

        //set a consolidation facet
        stack.consolidate(consolidation);            

        //
        //populate the tables
        //
        site_1.load(data1);
        site_2.load(data2);
        site_3.load(data3);

        //Create a table for the steel suppliers
        let suppliers = createTable(['supplier', 'steel_m2', 'transport_m2'], steel_suppliers);

        //load and calculate
        suppliers.load(data4);
        suppliers.calculate();

        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use
        //the average_cost_per_m2 aggregate from the suppliers table
        stack.setDefaultReferences( function(uses) {

            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;
        });  

        resolve( [stack, site_1, site_2, site_3, suppliers] );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

let unavailable = Symbol('unavailable');

function ifAvailable(obj, fn){

    let isAvailable = obj !== unavailable;

    return fn && isAvailable ? fn(obj) : isAvailable;
}

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    Alpine.data('consolidation', (name, formatter) => ({

        init(){
            //watch the store
            this.$watch(`$store.consolidated`,(new_value, old_value)=>{           
    
                this.calculatedValue = Alpine.store('siteStack')[name].valueOf();
            });                
        },

        calculatedValue: undefined,

        get value() {

            let v = this.calculatedValue ?? Alpine.store('siteStack')[name]?.valueOf();

            return !formatter ? v : formatter.format(v);
        },        
    }));

    Alpine.store('steelSuppliers', unavailable);
    Alpine.store('activeTable', unavailable);
    Alpine.store('siteStack', unavailable);
    Alpine.store('consolidated', 0);

    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) => {

        console.log('whenNoSheetReady');

        //Define some reference handles
        Alpine.store('low_margin_threshold', theStack.tables().getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theStack.tables().getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        //set the consolidation refernces to mirror the table consolidation handle
        theStack.setConsolidationReferences( function(uses) {

            this.low_margin_threshold = Alpine.store('low_margin_threshold').value;
        });

        //increment the consolidation tick to force UI update
        theStack.afterConsolidation( _ => {
            Alpine.store('consolidated', Alpine.store('consolidated') + 1);
         });

        theStack.tables().calculate();    

        //update the store with the init'd objects
        Alpine.store('siteStack', theStack);
        Alpine.store('activeTable', site1);
        Alpine.store('steelSuppliers', suppliers);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full" x-data="{tab: 0}" x-effect="ifAvailable($store.siteStack, _ => Alpine.store('activeTable', $store.siteStack.getUniqueTable(`site${tab+1}`)))">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Extending the Quote Calculator to handle multiple sites and multiple suppliers</h2>

        <div class="grid grid-cols-2 gap-4 items-start justify-center w-full">
            <div class="flex px-4">
                <div>
                    <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
                </div>
            </div>
        </div>        

        <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">
            <div class="flex px-4">
                <div>
                    <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                    <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                    <label for="Manufacturing_Cost">per m<sup>2</sup></label>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <label for="Margin_Threshold">Margin Threshold:</label>
                    <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                </div>
            </div>
        </div>        

        <h3>Site Quotation</h3>
        <p>The site quotation table shows the calculations for the selected site.<br>The <a href="#consolidation">consolidated</a> figures for all of the sites are shown at the top right of the table.</p>

        <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">
            <div class="flex px-4 py-2">
                <div>
                    <button :class="!tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="!tab" @click="tab = 0" class="hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 1
                    </button>
                </div>                    
                <div>
                    <button :class="1==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="1==tab" @click="tab = 1" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 2
                    </button>
                </div>                    
                <div>
                    <button :class="2==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="2==tab" @click="tab = 2" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 3
                    </button>
                </div>
            </div>
        </div>


        <div x-data="simpleNoSheetTable('activeTable')" class="w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2">
                    <tr class="text-center">
                        <th x-init="columns.push('item')" class="w-1/6 px-4 py-2 text-left">Item</th>
                        <th x-init="columns.push('steel_m2')" class="w-1/6  px-4 py-2">Steel Used m<sup>2</sup></th>
                        <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                        <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                        <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                        <th x-init="columns.push('line_cost')" class="px-4 py-2 text-center">Line Cost</th>
                        <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                        <th x-init="columns.push('gross_margin')" class="px-4 py-2 ">Gross Margin</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3 pr-4" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="[2,3].includes(column_index)">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,4,5,6].includes(column_index)">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                    </template>                                        

                                    <template x-if="column_index == 7">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th></th>
                    </tr>
                    <tr class="border-t-4">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Site Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </span>
                        </th>
                    </tr>
                    <tr>
                        <th colspan="*">&nbsp;</th>
                    </tr>
                    <tr>
                        <th colspan="5"></th>
                        <th class="text-left"colspan="*">For All Sites:</th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_cost')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_offer')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2"></th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray border-t-4">Profit:</th>
                        <th class="border-gray border-t-4 text-right" x-data="consolidation('profit')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray border-t-4">
                            <div x-data="consolidation('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="consolidation('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->
        <h3>Steel suppliers</h3>
        <p>The steel suppliers table calculates the average cost of supply based on the purchase and transportation costs from several suppliers using the <a href="#steel_suppliers">steel_suppliers</a> facet.</p>

        <div x-data="simpleNoSheetTable('steelSuppliers')" class="w-2/3 flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th x-init="columns.push('supplier')" class="w-1/6 px-4 py-2 text-left">Supplier</th>
                        <th x-init="columns.push('steel_m2')" class="w-2/6 px-4 py-2">Steel Cost<br>m<sup>2</sup></th>
                        <th x-init="columns.push('transport_m2')" class="w-2/6 px-4 py-2">Transport Cost m<sup>2</sup></th>
                        <th x-init="columns.push('cost_per_m2')" class="px-4 py-2">Supplier Cost m<sup>2</sup></th> 
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="pr-4 py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,2].includes(column_index)">
                                        <input type="number" min="0" step="0.1" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>                                                                            

                                    <template x-if="3 == column_index">
                                        <div x-text="item[column_index].toFixed(3)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(3))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th>Average:</th>
                        <th>
                            <div x-data="aggregate('average_cost_per_m2')" x-text="Number(value).toFixed(3)" class="text-right"></div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet tables:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//load the data
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">data1</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site1.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      <span class="nx">data2</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site2.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      <span class="nx">data3</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site3.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      <span class="nx">data4</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;steel_suppliers.json&#39;</span><span class="p">);</span> 
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//create and define the stack; which acts as a table factory and allows us to use consolidation facets
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">site_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site1&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">site_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site2&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">site_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site3&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1">//set the facets used by the stack
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">addFacets</span><span class="p">(</span><span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="c1">//set a consolidation facet
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">consolidation</span><span class="p">);</span>            
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="c1">//populate the tables
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="c1"></span><span class="nx">site_1</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data1</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="nx">site_2</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="nx">site_3</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data3</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="c1">//Create a table for the steel suppliers
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">suppliers</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;supplier&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;transport_m2&#39;</span><span class="p">],</span> <span class="nx">steel_suppliers</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="c1">//load and calculate
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="c1"></span><span class="nx">suppliers</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data4</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="nx">suppliers</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="c1">//Set the average_steel_cost_m2 reference required by the raw_materials facets to use
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="c1">//the average_cost_per_m2 aggregate from the suppliers table
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">setDefaultReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">suppliers</span><span class="p">).</span><span class="nx">average_cost_per_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="p">});</span>  
</span></span></code></pre></div>
<h3>The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="consolidation">The consolidation facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Consolidate table stack line items
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} columns   Table columns query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm">     * The total cost of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="cm">     * The total offer price of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="cm">     * Total profit
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">profit</span>      <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>            
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="steel_suppliers">The steel_suppliers facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate steel supply costs
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">transport_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">average_cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">AVERAGE</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;cost_per_m2&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
   
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Stress Test</title>
      <link>http://localhost:1313/noSheetWebsite/examples/stress-test/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/examples/stress-test/</guid>
      <description>&lt;script&gt;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {createTable} = await import(&#39;/noSheetWebsite/js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        let stress_table = createTable(&#xD;&#xA;                                        [&#39;seed&#39;], &#xD;&#xA;                                        function(table, row, refs) {&#xD;&#xA;                                            &#xD;&#xA;                                            for(let i = 1; i &lt;= refs.columns; i++){&#xD;&#xA;&#xD;&#xA;                                                row[i] = () =&gt; (row.seed + i)/refs.factor;&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                    );&#xD;&#xA;&#xD;&#xA;        stress_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.factor = 1/3;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        resolve( stress_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        let column_reference = theTable.getReferenceHandle(&#39;columns&#39;, 10);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;noSheetTable&#39;, {&#xD;&#xA;&#xD;&#xA;            timerId : 0,&#xD;&#xA;            samples : [],&#xD;&#xA;            profile(rows, columns, max_samples) {&#xD;&#xA;&#xD;&#xA;                this.samples = [];    &#xD;&#xA;                clearInterval(this.timerId);&#xD;&#xA;&#xD;&#xA;                theTable.unload();&#xD;&#xA;                theTable.load( Array.from({length: rows}, _ =&gt; [Math.random()]) );&#xD;&#xA;&#xD;&#xA;                //this will force a recalc&#xD;&#xA;                column_reference.value = columns;&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            },&#xD;&#xA;&#xD;&#xA;            calculate(max_samples){&#xD;&#xA;&#xD;&#xA;                //this will force a recalculation&#xD;&#xA;                let mark = window.performance.now();&#xD;&#xA;&#xD;&#xA;                theTable.calculate();&#xD;&#xA;&#xD;&#xA;                this.samples.push([window.performance.now() - mark]);&#xD;&#xA;&#xD;&#xA;                if( this.samples.length &gt; max_samples){&#xD;&#xA;&#xD;&#xA;                    this.samples.shift();&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                drawChart();&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;    google.charts.load(&#34;current&#34;, {packages:[&#34;corechart&#34;]});&#xD;&#xA;    google.charts.setOnLoadCallback(drawChart);&#xD;&#xA;&#xD;&#xA;    var options = {&#xD;&#xA;        legend: { position: &#39;none&#39; },&#xD;&#xA;        colors: [&#39;#4285F4&#39;],&#xD;&#xA;&#xD;&#xA;        chartArea: { width: &#39;90%&#39; },&#xD;&#xA;        hAxis: {&#xD;&#xA;            viewWindowMode: &#39;pretty&#39;,&#xD;&#xA;            title: &#39;execution time in ms&#39;,&#xD;&#xA;            format: &#39;#.#&#39;,&#xD;&#xA;            slantedTextAngle : 75,&#xD;&#xA;            textStyle: {&#xD;&#xA;                fontSize: 12&#xD;&#xA;            },&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        vAxis :{&#xD;&#xA;            title: &#39;count&#39;,&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        bar: { gap: 0 },&#xD;&#xA;&#xD;&#xA;        histogram: {&#xD;&#xA;            bucketSize: 0.01,&#xD;&#xA;            maxNumBuckets: 100,&#xD;&#xA;            minValue: 0,&#xD;&#xA;            maxValue: 1&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    function drawChart() {&#xD;&#xA;        /*        &#xD;&#xA;        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame&#xD;&#xA;        https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;        */        &#xD;&#xA;&#xD;&#xA;        var data = new google.visualization.DataTable();&#xD;&#xA;&#xD;&#xA;        data.addColumn(&#39;number&#39;, &#39;Time(ms)&#39;);&#xD;&#xA;        data.addRows( Alpine.store(&#39;noSheetTable&#39;)?.samples??[] );&#xD;&#xA;&#xD;&#xA;        var chart = new google.visualization.Histogram(document.getElementById(&#39;chart_div&#39;));&#xD;&#xA;        chart.draw(data, options);&#xD;&#xA;    }&#xD;&#xA;});       &#xD;&#xA;&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Stress Test&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;span x-data=&#34;{rows:1000, columns:100, samples:1000}&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-auto w-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;div&gt;&#xD;&#xA;                        &lt;label for=&#34;columns&#34;&gt;Columns:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;columns&#34; x-model.number=&#34;columns&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                        &lt;label for=&#34;rows&#34;&gt;Rows:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;rows&#34; x-model.number=&#34;rows&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;label for=&#34;samples&#34;&gt;Max Samples:&lt;/label&gt;&#xD;&#xA;                    &lt;input id=&#34;samples&#34; x-model.number=&#34;samples&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-18 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &amp;nbsp;&#xD;&#xA;                    &lt;button class=&#34;bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded&#34; x-data=&#34;{title: &#39;Start&#39;}&#34; @click=&#34;$store.noSheetTable.profile(rows, columns, samples); title=&#39;Restart&#39;;&#34; x-text=&#34;title&#34;&gt;&lt;/button&gt;                        &#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;        &#xD;&#xA;        &lt;/span&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;            &lt;h3 class=&#34;text-center&#34;&gt;Performance Histogram&lt;/h3&gt;                        &#xD;&#xA;            &lt;div id=&#34;chart_div&#34;&gt;&lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setReferences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;  &lt;script src=&#34;https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;</description><content:encoded><![CDATA[
<script>
//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {createTable} = await import('/noSheetWebsite/js/nosheet.min.mjs');

        let stress_table = createTable(
                                        ['seed'], 
                                        function(table, row, refs) {
                                            
                                            for(let i = 1; i <= refs.columns; i++){

                                                row[i] = () => (row.seed + i)/refs.factor;
                                            }
                                        }
                                    );

        stress_table.setReferences( function() {

            this.factor = 1/3;
        });    

        resolve( stress_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        let column_reference = theTable.getReferenceHandle('columns', 10);

        Alpine.store('noSheetTable', {

            timerId : 0,
            samples : [],
            profile(rows, columns, max_samples) {

                this.samples = [];    
                clearInterval(this.timerId);

                theTable.unload();
                theTable.load( Array.from({length: rows}, _ => [Math.random()]) );

                //this will force a recalc
                column_reference.value = columns;

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            },

            calculate(max_samples){

                //this will force a recalculation
                let mark = window.performance.now();

                theTable.calculate();

                this.samples.push([window.performance.now() - mark]);

                if( this.samples.length > max_samples){

                    this.samples.shift();
                }

                drawChart();

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            }
        });

        //https://developers.google.com/chart/interactive/docs/gallery/histogram
    });

    google.charts.load("current", {packages:["corechart"]});
    google.charts.setOnLoadCallback(drawChart);

    var options = {
        legend: { position: 'none' },
        colors: ['#4285F4'],

        chartArea: { width: '90%' },
        hAxis: {
            viewWindowMode: 'pretty',
            title: 'execution time in ms',
            format: '#.#',
            slantedTextAngle : 75,
            textStyle: {
                fontSize: 12
            },
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        vAxis :{
            title: 'count',
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        bar: { gap: 0 },

        histogram: {
            bucketSize: 0.01,
            maxNumBuckets: 100,
            minValue: 0,
            maxValue: 1
        }
    };

    function drawChart() {
        /*        
        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame
        https://developers.google.com/chart/interactive/docs/gallery/histogram
        */        

        var data = new google.visualization.DataTable();

        data.addColumn('number', 'Time(ms)');
        data.addRows( Alpine.store('noSheetTable')?.samples??[] );

        var chart = new google.visualization.Histogram(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
});       

</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Stress Test</h2>

        <span x-data="{rows:1000, columns:100, samples:1000}">
            <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">

                <div class="flex px-4">
                    <div>
                        <label for="columns">Columns:</label>
                        <input id="columns" x-model.number="columns" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                        <label for="rows">Rows:</label>
                        <input id="rows" x-model.number="rows" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                    </div>
                </div>

                <div class="flex px-4">
                    <label for="samples">Max Samples:</label>
                    <input id="samples" x-model.number="samples" type="number" min="1" class="text-right w-18 border-gray-200 border-2">            
                    &nbsp;
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded" x-data="{title: 'Start'}" @click="$store.noSheetTable.profile(rows, columns, samples); title='Restart';" x-text="title"></button>                        
                </div>
            </div>        
        </span>

        <div class="container mx-auto w-full h-full">

            <h3 class="text-center">Performance Histogram</h3>                        
            <div id="chart_div"></div>
        </div>

        <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">let</span> <span class="nx">stress_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">                        <span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">],</span> 
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">                        <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>                                    
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">                            <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">columns</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">                                <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">seed</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">refs</span><span class="p">.</span><span class="nx">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">                    <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">stress_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div>
    </div>
</div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item></channel>
</rss>
