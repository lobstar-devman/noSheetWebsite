<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss
  version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>NoSheet</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on NoSheet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Jul 2025 00:00:01 +0100</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Compiler</title>
      <link>http://localhost:1313/compiler/</link>
      <pubDate>Mon, 14 Jul 2025 00:00:01 +0100</pubDate><guid>http://localhost:1313/compiler/</guid>
      <description>&lt;h3 id=&#34;compile-script&#34;&gt;Compile Script:&lt;/h3&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Compile the js library*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$js&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nosheet_source/noSheetRoot.mjs&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$compiled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$js&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ExecuteAsTemplate&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noSheetLibrary/noSheet.mjs&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$compiled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Minify the compiled library*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$minified_js&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$compiled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$minified_js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Copy minified to examples folder */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noSheetLibrary/noSheet.min.mjs&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Copy&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noSheetLibrary/examplesjs/noSheet.min.mjs&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Publish to the website */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nosheet_source/noSheetRoot.mjs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ExecuteAsTemplate&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;js/noSheet.mjs&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*Publish static noSheet_source files */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nosheet_source/examples/**.*&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;samp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publishing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/samp&amp;gt;&amp;lt;/br&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/nosheet_source&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Copy&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/nosheet_source&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noSheetLibrary/examples/js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Copy&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Copy compiled css to noSheetLibrary examples folder */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;compiled_css/*.css&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/compiled_css&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;noSheetLibrary/examples/css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;samp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publishing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/samp&amp;gt;&amp;lt;/br&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Copy&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Publish&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/data/example_1.json&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/data/example_2.json&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/data/example_3_site_2.json&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/data/example_3_site_3.json&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/data/example_3_steel_suppliers.json&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/facets/consolidation.mjs&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/facets/gross_margin.mjs&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/facets/lineitems.mjs&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/facets/raw_materials.mjs&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/facets/steel_suppliers.mjs&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/simple_alpine_table.js&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;    &lt;samp&gt;Publishing: /nosheet_source/examples/utils.js&lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;    &lt;samp&gt;Publishing: /compiled_css/main.css &gt;&gt; noSheetLibrary/examplescss/main.css &lt;/samp&gt;&lt;/br&gt;&#xD;&#xA;            &#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;    &lt;samp&gt;Publishing: /compiled_css/style.css &gt;&gt; noSheetLibrary/examplescss/style.css &lt;/samp&gt;&lt;/br&gt;</description><content:encoded><![CDATA[<h3 id="compile-script">Compile Script:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{{</span><span class="cm">/* Compile the js library*/</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="p">{{</span> <span class="nx">$js</span> <span class="o">:=</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">Get</span> <span class="s2">&#34;nosheet_source/noSheetRoot.mjs&#34;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="p">{{</span> <span class="nx">$compiled</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">$js</span> <span class="o">|</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">ExecuteAsTemplate</span> <span class="s2">&#34;noSheetLibrary/noSheet.mjs&#34;</span> <span class="p">.)</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="p">{{</span> <span class="nx">$compiled</span><span class="p">.</span><span class="nx">Publish</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">{{</span><span class="cm">/* Minify the compiled library*/</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">{{</span> <span class="nx">$minified_js</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">$compiled</span> <span class="o">|</span> <span class="nx">minify</span><span class="p">)</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">{{</span> <span class="nx">$minified_js</span><span class="p">.</span><span class="nx">Publish</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">{{</span><span class="cm">/* Copy minified to examples folder */</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">{{</span> <span class="nx">$x</span> <span class="o">:=</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">Get</span> <span class="s2">&#34;noSheetLibrary/noSheet.min.mjs&#34;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">{{</span> <span class="p">(</span><span class="nx">resources</span><span class="p">.</span><span class="nx">Copy</span> <span class="s2">&#34;noSheetLibrary/examplesjs/noSheet.min.mjs&#34;</span> <span class="nx">$x</span><span class="p">).</span><span class="nx">Publish</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">{{</span><span class="cm">/* Publish to the website */</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">{{</span> <span class="p">(((</span><span class="nx">resources</span><span class="p">.</span><span class="nx">Get</span> <span class="s2">&#34;nosheet_source/noSheetRoot.mjs&#34;</span><span class="p">)</span> <span class="o">|</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">ExecuteAsTemplate</span> <span class="s2">&#34;js/noSheet.mjs&#34;</span> <span class="p">.)</span> <span class="o">|</span> <span class="nx">minify</span><span class="p">).</span><span class="nx">Publish</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">{{</span><span class="cm">/*Publish static noSheet_source files */</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">{{</span> <span class="nx">range</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">Match</span> <span class="s2">&#34;nosheet_source/examples/**.*&#34;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="o">&lt;</span><span class="nx">samp</span><span class="o">&gt;</span><span class="nx">Publishing</span><span class="o">:</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">Name</span> <span class="p">}}</span><span class="o">&lt;</span><span class="err">/samp&gt;&lt;/br&gt;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">{{</span> <span class="nx">$to</span> <span class="o">:=</span> <span class="nx">replace</span> <span class="p">.</span><span class="nx">Name</span> <span class="s2">&#34;/nosheet_source&#34;</span> <span class="s2">&#34;js&#34;</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="p">{{</span> <span class="p">(</span><span class="nx">resources</span><span class="p">.</span><span class="nx">Copy</span> <span class="nx">$to</span> <span class="p">.).</span><span class="nx">Publish</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl">    <span class="p">{{</span> <span class="nx">$to</span> <span class="o">:=</span> <span class="nx">replace</span> <span class="p">.</span><span class="nx">Name</span> <span class="s2">&#34;/nosheet_source&#34;</span> <span class="s2">&#34;noSheetLibrary/examples/js&#34;</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">{{</span> <span class="p">(</span><span class="nx">resources</span><span class="p">.</span><span class="nx">Copy</span> <span class="nx">$to</span> <span class="p">.).</span><span class="nx">Publish</span> <span class="p">}}</span>    
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">{{</span><span class="cm">/* Copy compiled css to noSheetLibrary examples folder */</span><span class="p">}}</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="p">{{</span> <span class="nx">range</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">Match</span> <span class="s2">&#34;compiled_css/*.css&#34;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">{{</span> <span class="nx">$to</span> <span class="o">:=</span> <span class="nx">replace</span> <span class="p">.</span><span class="nx">Name</span> <span class="s2">&#34;/compiled_css&#34;</span> <span class="s2">&#34;noSheetLibrary/examples/css&#34;</span><span class="p">}}</span>    
</span></span><span class="line"><span class="ln">31</span><span class="cl">    <span class="o">&lt;</span><span class="nx">samp</span><span class="o">&gt;</span><span class="nx">Publishing</span><span class="o">:</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">Name</span> <span class="p">}}</span> <span class="o">&gt;&gt;</span> <span class="p">{{</span><span class="nx">$to</span><span class="p">}}</span> <span class="o">&lt;</span><span class="err">/samp&gt;&lt;/br&gt;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="p">{{</span> <span class="p">(</span><span class="nx">resources</span><span class="p">.</span><span class="nx">Copy</span> <span class="nx">$to</span> <span class="p">.).</span><span class="nx">Publish</span> <span class="p">}}</span>        
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span></span></span></code></pre></div>


















    <samp>Publishing: /nosheet_source/examples/data/example_1.json</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/data/example_2.json</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/data/example_3_site_2.json</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/data/example_3_site_3.json</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/data/example_3_steel_suppliers.json</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/facets/consolidation.mjs</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/facets/gross_margin.mjs</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/facets/lineitems.mjs</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/facets/raw_materials.mjs</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/facets/steel_suppliers.mjs</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/simple_alpine_table.js</samp></br>

    
    

    
        

    <samp>Publishing: /nosheet_source/examples/utils.js</samp></br>

    
    

    
        




        
    <samp>Publishing: /compiled_css/main.css >> noSheetLibrary/examplescss/main.css </samp></br>
            

        
    <samp>Publishing: /compiled_css/style.css >> noSheetLibrary/examplescss/style.css </samp></br>
            

]]></content:encoded></item><item>
      <title></title>
      <link>http://localhost:1313/noSheetLibrary/README.md</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetLibrary/README.md</guid>
      <description>&lt;h1 id=&#34;nosheet&#34;&gt;NoSheet&lt;/h1&gt;&#xA;&lt;p&gt;A JavaScript alternative to HSL&amp;rsquo;s (Horrible Spreadsheet Libraries)&lt;/p&gt;</description><content:encoded><![CDATA[<h1 id="nosheet">NoSheet</h1>
<p>A JavaScript alternative to HSL&rsquo;s (Horrible Spreadsheet Libraries)</p>


]]></content:encoded></item><item>
      <title>Advanced Features</title>
      <link>http://localhost:1313/pages/advanced-features/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/pages/advanced-features/</guid>
      <description>&lt;h2 id=&#34;facets&#34;&gt;Facets&lt;/h2&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &lt;p&gt;A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &amp;lsquo;do a job&amp;rsquo;, that &amp;lsquo;job&amp;rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.&lt;/p&gt;&#xA;&lt;p&gt;As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;invoice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    This statement is executed for every row and will calculate the row subtotal.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    The subtotal column doesn&amp;#39;t need to be defined prior to the facet being used - the new column&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    will be automatically created and populated for each row.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subtotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quantity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    It uses the &amp;#39;column&amp;#39; method of the context to get all the subtotal values from the rows as an array &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    and then passes them to a &amp;#39;SUM&amp;#39; function.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;grand_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;subtotal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &amp;lsquo;gross margin&amp;rsquo; facet from your library.&lt;/p&gt;</description><content:encoded><![CDATA[<h2 id="facets">Facets</h2>




    
    <p>A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &lsquo;do a job&rsquo;, that &lsquo;job&rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.</p>
<p>As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">invoice</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This statement is executed for every row and will calculate the row subtotal.
</span></span></span><span class="line"><span class="cl"><span class="cm">    The subtotal column doesn&#39;t need to be defined prior to the facet being used - the new column
</span></span></span><span class="line"><span class="cl"><span class="cm">    will be automatically created and populated for each row.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">subtotal</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.
</span></span></span><span class="line"><span class="cl"><span class="cm">    It uses the &#39;column&#39; method of the context to get all the subtotal values from the rows as an array 
</span></span></span><span class="line"><span class="cl"><span class="cm">    and then passes them to a &#39;SUM&#39; function.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &lsquo;gross margin&rsquo; facet from your library.</p>

<p>Read about what the differences between noSheet and a spreadsheet library are <a href="/pages/what-the-diff">here</a>.</p>
<h2 id="data-populations">Data Populations</h2>
<p>Rows within a noSheet table exist in populations, if you don&rsquo;t define a population when you load data, it will be assigned to the <code>default</code> population</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;lineitems&#39;</span> <span class="cm">/*define the population for these rows*/</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="what-are-populations-for">What are populations for?</h3>
<p>Populations give you a finer grained way of manipulating data in the table by:</p>
<ul>
<li>Loading / unloading data before a calculation is done using <a href="#hooks">hooks</a>.</li>
<li>Querying rows by populations in facets using the <a href="#columns">columns</a> method.</li>
</ul>
<h2 id="columns">Querying table rows</h2>
<p>You can use the <code>column</code>/<code>columns</code> context method inside facets to query data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;column1&#39;</span><span class="p">,</span> <span class="s1">&#39;column2&#39;</span><span class="p">));</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The <code>columns(s)</code> context methods will verify the column parameters to make sure that you are not selecting from columns that haven&rsquo;t been calculated yet <a href="/pages/what-the-diff#">see formula precedents and dependants</a></p>
<p>The <code>column</code>/<code>columns</code> methods have a basic psuedo SQL SELECT fluent syntax allowing you select:</p>
<ul>
<li><strong>from</strong> one or more populations</li>
<li><strong>where</strong> you can define your own filter conditions</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">de_minimis</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">).</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;imported&#39;</span><span class="p">).</span><span class="nx">where</span><span class="p">(</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">value</span> <span class="o">&lt;=</span> <span class="mi">800</span> <span class="p">)</span> <span class="p">);</span>      
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="stacks">Stacks</h2>
<p>You can define a stack of tables using the <code>defineStack</code> function.</p>
<p>A stack is a group of tables that all share the same facets but which have different data.</p>
<p>When you add tables to a stack you can identity them with tags:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site1&#39;</span><span class="p">,</span> <span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site2&#39;</span><span class="p">,</span> <span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site3&#39;</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>By using a stack and table tags you can:</p>
<ul>
<li>Dynamically add/remove tables</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">invoice_4</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site4&#39;</span><span class="p">,</span> <span class="s1">&#39;south&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">).</span><span class="nx">detach</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>Query table aggregate data</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"> <span class="c1">//return an array of grand_total aggregates for all the tables tagged with &#39;west&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">grand_totals</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;west&#39;</span><span class="p">).</span><span class="nx">aggregates</span><span class="p">(</span><span class="s1">&#39;grand_total&#39;</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>Selectively calculate tables</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">).</span><span class="nx">calculate</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>Selectively consolidate tables</li>
</ul>
<h2 id="consolidation">Consolidation</h2>
<p>A stack gives you ability to consolidate tables using facets.</p>
<p>Lets say you have stack of multiple invoices:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;west&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">stack</span><span class="p">.</span><span class="nx">addFacets</span><span class="p">(</span><span class="nx">invoice</span><span class="p">);</span>
</span></span></code></pre></div><p>You consolidation facets could look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Consolidate table stack invoices
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param {*} columns   Table columns query object
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">all_invoices</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">all_invoices</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">east</span>  <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">aggregates</span><span class="p">([</span><span class="s1">&#39;east&#39;</span><span class="p">]).</span><span class="nx">total</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">west</span>  <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">aggregates</span><span class="p">([</span><span class="s1">&#39;west&#39;</span><span class="p">]).</span><span class="nx">total</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="references">References</h2>
<p>References allow you to define facets that require external data in order to function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">currency_exchange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">Euro</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">USD</span> <span class="o">*</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">exchange_rate</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">order</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">],</span> <span class="nx">invoice</span><span class="p">,</span> <span class="nx">currency_exchange</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">order</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Define a &#39;pull&#39; reference that will be used whenever the facet is calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="mf">0.87</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div><p>References can also be &lsquo;push&rsquo; references that force a table recalculation whenever they are changed</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">handle</span> <span class="o">=</span> <span class="nx">order</span><span class="p">.</span><span class="nx">getReferenceHandle</span><span class="p">(</span><span class="s1">&#39;exchange_rate&#39;</span><span class="p">,</span> <span class="mf">0.87</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">handle</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="mf">0.88</span><span class="p">;</span> <span class="c1">//this statement will force a recalculation of the order table
</span></span></span></code></pre></div><h3 id="table-references">Table references</h3>
<p>References can also be aggregates from other tables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">order</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//define a reference based on another tables aggregate, if the &#39;another_no_sheet_table&#39; is recalculated then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//the order table will be recalculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">another_no_sheet_table</span><span class="p">).</span><span class="nx">average_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="stack-references">Stack References</h3>
<p>Stacks can have default references which can then be overriden based on table tags:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//This default reference will be used by all tables - even tables added to the stack later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">setDefaultReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">another_no_sheet_table</span><span class="p">).</span><span class="nx">average_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Any table tagged with &#39;old-invoices&#39; will now use a different exchange rate reference in it&#39;s facet calculations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;old-invoices&#39;</span><span class="p">).</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">old_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div><h3 id="consolidation-references">Consolidation references</h3>
<p>Consolidations facets can use references too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">all_invoices</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="o">*</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">markup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">all_invoices</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">setConsolidationReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">markup</span> <span class="o">=</span> <span class="mf">1.25</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>Facets can reference consolidation aggregates</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">consolidate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tables</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="nx">tables</span><span class="p">.</span><span class="nx">total</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack1</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">consolidate</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack2</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">reference</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">stack1</span><span class="p">).</span><span class="nx">grand_total</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>      
</span></span></code></pre></div><h2 id="hooks">Hooks</h2>
<p>You can define hooks on tables or stacks that get called:</p>
<h3 id="before-or-after-calculations">Before or After Calculations</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">aTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">afterCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">afterCalculate</span><span class="p">(</span> <span class="nx">aTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span></code></pre></div><p><code>beforeCalculate</code> hooks are good becuase they allow you to preprocess the table data before each calculation, as an example consider a Bill Of Materials where you may need to add/remove additional rows based on the data in the table:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//remove all rows in the &#39;fixings&#39; population
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">theTable</span><span class="p">.</span><span class="nx">unload</span><span class="p">(</span><span class="s1">&#39;fixings&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//find all quantities where the length of any entry in the &#39;panels&#39; population is greater than 1200mm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//and add in a matching row for fixings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">theTable</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">).</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;panels&#39;</span><span class="p">).</span><span class="nx">where</span><span class="p">(</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1200</span> <span class="p">).</span><span class="nx">forEach</span><span class="p">(</span> <span class="p">(</span><span class="nx">quantity</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">theTable</span><span class="p">.</span><span class="nx">load</span><span class="p">([[</span><span class="s1">&#39;sku001&#39;</span><span class="p">,</span> <span class="nx">quantity</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">]],</span> <span class="s1">&#39;fixings&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="before-and-after-consolidation">Before and After Consolidation</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">beforeConsolidation</span><span class="p">(</span> <span class="nx">theStack</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>        
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">afterConsolidation</span><span class="p">(</span> <span class="nx">theStack</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span></code></pre></div>]]></content:encoded></item><item>
      <title>Example 1 - A Simple Quote Calculator</title>
      <link>http://localhost:1313/examples/example-1/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/examples/example-1/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: lineitems} = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;unit_cost&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], lineitems);&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;        new_table.calculate();&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;items-left&#34;&gt;&#xD;&#xA;            &lt;p&gt;This table is calculated using the &lt;a href=&#34;#lineitems&#34;&gt;lineitems&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[<script>
const SUM = formulajs.SUM;

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: lineitems} = await import('js/examples/facets/lineitems.mjs');

        //the data
        const response = await fetch('js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'unit_cost', 'unit_offer', 'quantity'], lineitems);

        //
        //populate the table
        //
        new_table.load(data);
        new_table.calculate();

        resolve( new_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <div class="items-left">
            <p>This table is calculated using the <a href="#lineitems">lineitems</a> facet</p>
            <p>The <a href="#lineitems">lineitems</a> facet contains formulas that calculate the <code>Line Cost</code> and <code>Line Offer</code> cells for each row as well as the aggregate values <code>total_cost</code>, <code>total_offer</code> and <code>profit</code> that are displayed at the bottom of the table</p>
        </div>

        <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th class="w-2/6 px-4 py-2 text-left">Item</th>
                        <th class="px-4 py-2">Item Cost</th>
                        <th class="px-4 py-2">Unit Price</th>
                        <th class="px-4 py-2">Quantity</th>
                        <th class="px-4 py-2">Line Cost</th>
                        <th class="px-4 py-2">Line Offer</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, index) in items" :key="index">
                        <tr :id="`${storeId}-row[${index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column, column_index) in Array(6)">
                                <td class="py-3" :id="`${storeId}_cell[${index}][${column_index}]`">

                                    <template x-if="column_index > 0 && column_index <= 3">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="column_index >= 4">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[index] may be 'undefined' -->
                                        <div x-text="item[column_index]" x-init="$watch('calculationTick', _ => $el.innerHTML = items[index]?.[column_index])" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="value" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>
                    <tr class="border-t-4 text-gray-800">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>

                </tfoot>
            </table>

            <div>
                <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
                <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
            </div>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>            
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_cost&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">lineitems</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">new_table</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span></span></span></code></pre></div>          
<h3 id="lineitems">The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
            
        </div>

    </div>
</div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Example 1 - A Simple Quote Calculator</title>
      <link>http://localhost:1313/noSheetLibrary/examples/example-1.html</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetLibrary/examples/example-1.html</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: lineitems} = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;unit_cost&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], lineitems);&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;        new_table.calculate();&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;items-left&#34;&gt;&#xD;&#xA;            &lt;p&gt;This table is calculated using the &lt;a href=&#34;#lineitems&#34;&gt;lineitems&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[

    <script>
const SUM = formulajs.SUM;

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: lineitems} = await import('js/examples/facets/lineitems.mjs');

        //the data
        const response = await fetch('js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'unit_cost', 'unit_offer', 'quantity'], lineitems);

        //
        //populate the table
        //
        new_table.load(data);
        new_table.calculate();

        resolve( new_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <div class="items-left">
            <p>This table is calculated using the <a href="#lineitems">lineitems</a> facet</p>
            <p>The <a href="#lineitems">lineitems</a> facet contains formulas that calculate the <code>Line Cost</code> and <code>Line Offer</code> cells for each row as well as the aggregate values <code>total_cost</code>, <code>total_offer</code> and <code>profit</code> that are displayed at the bottom of the table</p>
        </div>

        <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th class="w-2/6 px-4 py-2 text-left">Item</th>
                        <th class="px-4 py-2">Item Cost</th>
                        <th class="px-4 py-2">Unit Price</th>
                        <th class="px-4 py-2">Quantity</th>
                        <th class="px-4 py-2">Line Cost</th>
                        <th class="px-4 py-2">Line Offer</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, index) in items" :key="index">
                        <tr :id="`${storeId}-row[${index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column, column_index) in Array(6)">
                                <td class="py-3" :id="`${storeId}_cell[${index}][${column_index}]`">

                                    <template x-if="column_index > 0 && column_index <= 3">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="column_index >= 4">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[index] may be 'undefined' -->
                                        <div x-text="item[column_index]" x-init="$watch('calculationTick', _ => $el.innerHTML = items[index]?.[column_index])" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="value" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>
                    <tr class="border-t-4 text-gray-800">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="value" class="text-right"></div>
                        </th>
                    </tr>

                </tfoot>
            </table>

            <div>
                <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
                <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
            </div>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>            
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_cost&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">lineitems</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span><span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">new_table</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span></span></span></code></pre></div>          
<h3 id="lineitems">The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
            
        </div>

    </div>
</div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>


]]></content:encoded></item><item>
      <title>Example 2 - Multiple Facets &amp; References</title>
      <link>http://localhost:1313/examples/example-2/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/examples/example-2/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials} = await import(&#39;js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}     = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}  = await import(&#39;js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.&#xD;&#xA;        //Here we set average_steel_cost_m2 to be a constant&#xD;&#xA;        //manufacturing_cost_per_m2 is set dynamically using Alpine&#xD;&#xA;        new_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = 0.2;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theTable.getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theTable.getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        theTable.calculate();        &#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;    &lt;h2&gt;Extending the Simple Quote Calculator with additional facets&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;    &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-left w-full&#34;&gt;&#xD;&#xA;        &lt;div class=&#34;flex px-4 py-2&#34;&gt;&#xD;&#xA;            &lt;div&gt;&#xD;&#xA;                &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[
<script>
const SUM = formulajs.SUM;
var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials} = await import('js/examples/facets/raw_materials.mjs');
        const {default: lineitems}     = await import('js/examples/facets/lineitems.mjs');
        const {default: gross_margin}  = await import('js/examples/facets/gross_margin.mjs');        

        //the data
        const response = await fetch('js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'steel_m2', 'unit_offer', 'quantity'], raw_materials, lineitems, gross_margin);

        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
        //Here we set average_steel_cost_m2 to be a constant
        //manufacturing_cost_per_m2 is set dynamically using Alpine
        new_table.setReferences( function() {

            this.average_steel_cost_m2 = 0.2;
        });    

        //
        //populate the table
        //
        new_table.load(data);

        resolve( new_table );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        Alpine.store('low_margin_threshold', theTable.getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theTable.getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        theTable.calculate();        

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

    <h2>Extending the Simple Quote Calculator with additional facets</h2>

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4 py-2">
            <div>
                <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
            </div>
        </div>

        <div class="flex px-4 py-2">
            <div>
                <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
            </div>
        </div>
    </div>     

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4">
            <div>
                <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                <label for="Manufacturing_Cost">per m<sup>2</sup></label>
            </div>
        </div>

        <div class="flex px-4">
            <div>
                <label for="Margin_Threshold">Margin Threshold:</label>
                <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
            </div>
        </div>
    </div>        

    <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
        <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
            <thead class="border-b-2">
                <tr class="text-center">
                    <th x-init="columns.push('item')" class="w-2/6 px-4 py-2 text-left">Item</th>
                    <th x-init="columns.push('steel_m2')" class="px-4 py-2">Steel m<sup>2</sup></th>
                    <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                    <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                    <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                    <th x-init="columns.push('line_cost')" class="px-4 py-2">Line Cost</th>
                    <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                    <th x-init="columns.push('gross_margin')" class="px-4 py-2">Gross Margin</th>
                </tr>    
            </thead>
            <tbody>
                <template x-for="(item, row_index) in items" :key="row_index">
                    <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                        <template x-for="(column_name, html_column_index) in columns">
                            <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                <template x-if="[1,2,3].includes(column_index)">
                                    <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                </template>
                                
                                <template x-if="!column_index">
                                    <!--Don't update on calculation-->
                                    <span x-text="item[column_index]"></span>                                            
                                </template>                                        

                                <template x-if="[4,5,6].includes(column_index)">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                </template>                                        

                                <template x-if="column_index == 7">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                </template>                                        

                            </td>
                        </template>
                    </tr>
                </template>
                <tr x-show="isEmpty">
                    <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                </tr>
            </tbody>
            <tfoot class="border-t-4 text-gray-800">    
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>
                        <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th></th>
                </tr>
                <tr class="border-t-4 text-gray-800">
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Profit:</th>
                    <th>
                        <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                            <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                        </span>
                    </th>
                </tr>

            </tfoot>
        </table>

        <div>
            <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
            <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
        </div>
    </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span>    <span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span>    <span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>    <span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="c1">//The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>    <span class="c1">//Here we set average_steel_cost_m2 to be a constant
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span>    <span class="c1">//manufacturing_cost_per_m2 is set dynamically using Alpine    
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">});</span>    
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span>    <span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span></span></span></code></pre></div>
<h3 id="raw_materials">The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="gross_margin">The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Example 2 - Multiple Facets &amp; References</title>
      <link>http://localhost:1313/noSheetLibrary/examples/example-2.html</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetLibrary/examples/example-2.html</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM = formulajs.SUM;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials} = await import(&#39;js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}     = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}  = await import(&#39;js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;&#xD;&#xA;        //the data&#xD;&#xA;        const response = await fetch(&#39;js/examples/data/example_1.json&#39;);&#xD;&#xA;        const data = response.ok ? await response.json() : [];&#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //create and define the table&#xD;&#xA;        //        &#xD;&#xA;        let new_table = createTable([&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;], raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.&#xD;&#xA;        //Here we set average_steel_cost_m2 to be a constant&#xD;&#xA;        //manufacturing_cost_per_m2 is set dynamically using Alpine&#xD;&#xA;        new_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = 0.2;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the table&#xD;&#xA;        //&#xD;&#xA;        new_table.load(data);&#xD;&#xA;&#xD;&#xA;        resolve( new_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;    Alpine.store(&#39;lineitemsTable&#39;, {});&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theTable.getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theTable.getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        theTable.calculate();        &#xD;&#xA;&#xD;&#xA;        //update the store with the loaded nosheet table&#xD;&#xA;        Alpine.store(&#39;lineitemsTable&#39;, theTable);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;    &lt;h2&gt;Extending the Simple Quote Calculator with additional facets&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;    &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-left w-full&#34;&gt;&#xD;&#xA;        &lt;div class=&#34;flex px-4 py-2&#34;&gt;&#xD;&#xA;            &lt;div&gt;&#xD;&#xA;                &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[

    
<script>
const SUM = formulajs.SUM;
var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials} = await import('js/examples/facets/raw_materials.mjs');
        const {default: lineitems}     = await import('js/examples/facets/lineitems.mjs');
        const {default: gross_margin}  = await import('js/examples/facets/gross_margin.mjs');        

        //the data
        const response = await fetch('js/examples/data/example_1.json');
        const data = response.ok ? await response.json() : [];

        //
        //create and define the table
        //        
        let new_table = createTable(['item', 'steel_m2', 'unit_offer', 'quantity'], raw_materials, lineitems, gross_margin);

        //The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
        //Here we set average_steel_cost_m2 to be a constant
        //manufacturing_cost_per_m2 is set dynamically using Alpine
        new_table.setReferences( function() {

            this.average_steel_cost_m2 = 0.2;
        });    

        //
        //populate the table
        //
        new_table.load(data);

        resolve( new_table );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');
    Alpine.store('lineitemsTable', {});

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        Alpine.store('low_margin_threshold', theTable.getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theTable.getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        theTable.calculate();        

        //update the store with the loaded nosheet table
        Alpine.store('lineitemsTable', theTable);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

    <h2>Extending the Simple Quote Calculator with additional facets</h2>

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4 py-2">
            <div>
                <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
            </div>
        </div>

        <div class="flex px-4 py-2">
            <div>
                <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
            </div>
        </div>
    </div>     

    <div class="grid grid-cols-2 gap-4 justify-items-left w-full">
        <div class="flex px-4">
            <div>
                <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                <label for="Manufacturing_Cost">per m<sup>2</sup></label>
            </div>
        </div>

        <div class="flex px-4">
            <div>
                <label for="Margin_Threshold">Margin Threshold:</label>
                <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
            </div>
        </div>
    </div>        

    <div x-data="simpleNoSheetTable('lineitemsTable')" class="p-5 w-full flex flex-col">
        <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
            <thead class="border-b-2">
                <tr class="text-center">
                    <th x-init="columns.push('item')" class="w-2/6 px-4 py-2 text-left">Item</th>
                    <th x-init="columns.push('steel_m2')" class="px-4 py-2">Steel m<sup>2</sup></th>
                    <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                    <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                    <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                    <th x-init="columns.push('line_cost')" class="px-4 py-2">Line Cost</th>
                    <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                    <th x-init="columns.push('gross_margin')" class="px-4 py-2">Gross Margin</th>
                </tr>    
            </thead>
            <tbody>
                <template x-for="(item, row_index) in items" :key="row_index">
                    <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                        <template x-for="(column_name, html_column_index) in columns">
                            <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                <template x-if="[1,2,3].includes(column_index)">
                                    <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                </template>
                                
                                <template x-if="!column_index">
                                    <!--Don't update on calculation-->
                                    <span x-text="item[column_index]"></span>                                            
                                </template>                                        

                                <template x-if="[4,5,6].includes(column_index)">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                </template>                                        

                                <template x-if="column_index == 7">
                                    <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                    <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                </template>                                        

                            </td>
                        </template>
                    </tr>
                </template>
                <tr x-show="isEmpty">
                    <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found.</td>
                </tr>
            </tbody>
            <tfoot class="border-t-4 text-gray-800">    
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>
                        <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th></th>
                </tr>
                <tr class="border-t-4 text-gray-800">
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>Profit:</th>
                    <th>
                        <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                    </th>
                    <th>
                        <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                            <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                        </span>
                    </th>
                </tr>

            </tfoot>
        </table>

        <div>
            <button @click="storedTable.load(getRandomData(), 'random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Load Random Data</button>            
            <button @click="storedTable.unload('random_data');reset();" class="bg-transparent hover:bg-gray-600 font-semibold hover:text-white py-2 px-4 border-gray-300 hover:border-transparent border-2 rounded">Unload All Random Data</button>
        </div>
    </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet table:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span>    <span class="c1">//create and define the table
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1"></span>    <span class="c1">//        
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>    <span class="kd">let</span> <span class="nx">new_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">],</span> <span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="c1">//The raw_materials facet requires two external references; manufacturing_cost_per_m2 and average_steel_cost_m2.
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>    <span class="c1">//Here we set average_steel_cost_m2 to be a constant
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span>    <span class="c1">//manufacturing_cost_per_m2 is set dynamically using Alpine    
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">});</span>    
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1"></span>    <span class="c1">//populate the table
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="c1"></span>    <span class="nx">new_table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span></span></span></code></pre></div>
<h3 id="raw_materials">The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="gross_margin">The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>


]]></content:encoded></item><item>
      <title>Example 3 - Stacks, Consolidation &amp; References</title>
      <link>http://localhost:1313/examples/example-3/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/examples/example-3/</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM     = formulajs.SUM,&#xD;&#xA;      AVERAGE = formulajs.AVERAGE;&#xD;&#xA;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials}   = await import(&#39;js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}       = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}    = await import(&#39;js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;        const {default: steel_suppliers} = await import(&#39;js/examples/facets/steel_suppliers.mjs&#39;);        &#xD;&#xA;        const {default: consolidation}   = await import(&#39;js/examples/facets/consolidation.mjs&#39;);    &#xD;&#xA;&#xD;&#xA;        //load the data&#xD;&#xA;        const data1 = await loadJSON(&#39;js/examples/data/example_1.json&#39;),&#xD;&#xA;              data2 = await loadJSON(&#39;js/examples/data/example_3_site_2.json&#39;),&#xD;&#xA;              data3 = await loadJSON(&#39;js/examples/data/example_3_site_3.json&#39;),&#xD;&#xA;              data4 = await loadJSON(&#39;js/examples/data/example_3_steel_suppliers.json&#39;); &#xD;&#xA;        &#xD;&#xA;        //&#xD;&#xA;        //create and define the stack, which acts as a table factory and allows us to use consolidation facets&#xD;&#xA;        //        &#xD;&#xA;        let stack = defineStack(&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;),&#xD;&#xA;            site_1 = stack.createTable(&#39;site1&#39;),&#xD;&#xA;            site_2 = stack.createTable(&#39;site2&#39;),&#xD;&#xA;            site_3 = stack.createTable(&#39;site3&#39;);&#xD;&#xA;&#xD;&#xA;        //set the facets used by the stack&#xD;&#xA;        stack.addFacets(raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //set a consolidation facet&#xD;&#xA;        stack.consolidate(consolidation);            &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the tables&#xD;&#xA;        //&#xD;&#xA;        site_1.load(data1);&#xD;&#xA;        site_2.load(data2);&#xD;&#xA;        site_3.load(data3);&#xD;&#xA;&#xD;&#xA;        //Create a table for the steel suppliers&#xD;&#xA;        let suppliers = createTable([&#39;supplier&#39;, &#39;steel_m2&#39;, &#39;transport_m2&#39;], steel_suppliers);&#xD;&#xA;&#xD;&#xA;        //load and calculate&#xD;&#xA;        suppliers.load(data4);&#xD;&#xA;        suppliers.calculate();&#xD;&#xA;&#xD;&#xA;        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use&#xD;&#xA;        //the average_cost_per_m2 aggregate from the suppliers table&#xD;&#xA;        stack.setDefaultReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;&#xD;&#xA;        });  &#xD;&#xA;&#xD;&#xA;        resolve( [stack, site_1, site_2, site_3, suppliers] );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;let unavailable = Symbol(&#39;unavailable&#39;);&#xD;&#xA;&#xD;&#xA;function ifAvailable(obj, fn){&#xD;&#xA;&#xD;&#xA;    let isAvailable = obj !== unavailable;&#xD;&#xA;&#xD;&#xA;    return fn &amp;&amp; isAvailable ? fn(obj) : isAvailable;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    Alpine.data(&#39;consolidation&#39;, (name, formatter) =&gt; ({&#xD;&#xA;&#xD;&#xA;        init(){&#xD;&#xA;            //watch the store&#xD;&#xA;            this.$watch(`$store.consolidated`,(new_value, old_value)=&gt;{           &#xD;&#xA;    &#xD;&#xA;                this.calculatedValue = Alpine.store(&#39;siteStack&#39;)[name].valueOf();&#xD;&#xA;            });                &#xD;&#xA;        },&#xD;&#xA;&#xD;&#xA;        calculatedValue: undefined,&#xD;&#xA;&#xD;&#xA;        get value() {&#xD;&#xA;&#xD;&#xA;            let v = this.calculatedValue ?? Alpine.store(&#39;siteStack&#39;)[name]?.valueOf();&#xD;&#xA;&#xD;&#xA;            return !formatter ? v : formatter.format(v);&#xD;&#xA;        },        &#xD;&#xA;    }));&#xD;&#xA;&#xD;&#xA;    Alpine.store(&#39;steelSuppliers&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;activeTable&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;siteStack&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;consolidated&#39;, 0);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //Define some reference handles&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theStack.tables().getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theStack.tables().getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        //set the consolidation refernces to mirror the table consolidation handle&#xD;&#xA;        theStack.setConsolidationReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.low_margin_threshold = Alpine.store(&#39;low_margin_threshold&#39;).value;&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //increment the consolidation tick to force UI update&#xD;&#xA;        theStack.afterConsolidation( _ =&gt; {&#xD;&#xA;            Alpine.store(&#39;consolidated&#39;, Alpine.store(&#39;consolidated&#39;) + 1);&#xD;&#xA;         });&#xD;&#xA;&#xD;&#xA;        theStack.tables().calculate();    &#xD;&#xA;&#xD;&#xA;        //update the store with the init&#39;d objects&#xD;&#xA;        Alpine.store(&#39;siteStack&#39;, theStack);&#xD;&#xA;        Alpine.store(&#39;activeTable&#39;, site1);&#xD;&#xA;        Alpine.store(&#39;steelSuppliers&#39;, suppliers);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34; x-data=&#34;{tab: 0}&#34; x-effect=&#34;ifAvailable($store.siteStack, _ =&gt; Alpine.store(&#39;activeTable&#39;, $store.siteStack.getUniqueTable(`site${tab+1}`)))&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Extending the Quote Calculator to handle multiple sites and multiple suppliers&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;grid grid-cols-2 gap-4 items-start justify-center w-full&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                &lt;div&gt;&#xD;&#xA;                    &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[
<script>
const SUM     = formulajs.SUM,
      AVERAGE = formulajs.AVERAGE;

var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials}   = await import('js/examples/facets/raw_materials.mjs');
        const {default: lineitems}       = await import('js/examples/facets/lineitems.mjs');
        const {default: gross_margin}    = await import('js/examples/facets/gross_margin.mjs');        
        const {default: steel_suppliers} = await import('js/examples/facets/steel_suppliers.mjs');        
        const {default: consolidation}   = await import('js/examples/facets/consolidation.mjs');    

        //load the data
        const data1 = await loadJSON('js/examples/data/example_1.json'),
              data2 = await loadJSON('js/examples/data/example_3_site_2.json'),
              data3 = await loadJSON('js/examples/data/example_3_site_3.json'),
              data4 = await loadJSON('js/examples/data/example_3_steel_suppliers.json'); 
        
        //
        //create and define the stack, which acts as a table factory and allows us to use consolidation facets
        //        
        let stack = defineStack('item', 'steel_m2', 'unit_offer', 'quantity'),
            site_1 = stack.createTable('site1'),
            site_2 = stack.createTable('site2'),
            site_3 = stack.createTable('site3');

        //set the facets used by the stack
        stack.addFacets(raw_materials, lineitems, gross_margin);

        //set a consolidation facet
        stack.consolidate(consolidation);            

        //
        //populate the tables
        //
        site_1.load(data1);
        site_2.load(data2);
        site_3.load(data3);

        //Create a table for the steel suppliers
        let suppliers = createTable(['supplier', 'steel_m2', 'transport_m2'], steel_suppliers);

        //load and calculate
        suppliers.load(data4);
        suppliers.calculate();

        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use
        //the average_cost_per_m2 aggregate from the suppliers table
        stack.setDefaultReferences( function(uses) {

            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;
        });  

        resolve( [stack, site_1, site_2, site_3, suppliers] );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

let unavailable = Symbol('unavailable');

function ifAvailable(obj, fn){

    let isAvailable = obj !== unavailable;

    return fn && isAvailable ? fn(obj) : isAvailable;
}

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    Alpine.data('consolidation', (name, formatter) => ({

        init(){
            //watch the store
            this.$watch(`$store.consolidated`,(new_value, old_value)=>{           
    
                this.calculatedValue = Alpine.store('siteStack')[name].valueOf();
            });                
        },

        calculatedValue: undefined,

        get value() {

            let v = this.calculatedValue ?? Alpine.store('siteStack')[name]?.valueOf();

            return !formatter ? v : formatter.format(v);
        },        
    }));

    Alpine.store('steelSuppliers', unavailable);
    Alpine.store('activeTable', unavailable);
    Alpine.store('siteStack', unavailable);
    Alpine.store('consolidated', 0);

    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) => {

        console.log('whenNoSheetReady');

        //Define some reference handles
        Alpine.store('low_margin_threshold', theStack.tables().getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theStack.tables().getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        //set the consolidation refernces to mirror the table consolidation handle
        theStack.setConsolidationReferences( function(uses) {

            this.low_margin_threshold = Alpine.store('low_margin_threshold').value;
        });

        //increment the consolidation tick to force UI update
        theStack.afterConsolidation( _ => {
            Alpine.store('consolidated', Alpine.store('consolidated') + 1);
         });

        theStack.tables().calculate();    

        //update the store with the init'd objects
        Alpine.store('siteStack', theStack);
        Alpine.store('activeTable', site1);
        Alpine.store('steelSuppliers', suppliers);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full" x-data="{tab: 0}" x-effect="ifAvailable($store.siteStack, _ => Alpine.store('activeTable', $store.siteStack.getUniqueTable(`site${tab+1}`)))">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Extending the Quote Calculator to handle multiple sites and multiple suppliers</h2>

        <div class="grid grid-cols-2 gap-4 items-start justify-center w-full">
            <div class="flex px-4">
                <div>
                    <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
                </div>
            </div>
        </div>        

        <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">
            <div class="flex px-4">
                <div>
                    <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                    <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                    <label for="Manufacturing_Cost">per m<sup>2</sup></label>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <label for="Margin_Threshold">Margin Threshold:</label>
                    <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                </div>
            </div>
        </div>        

        <h3>Site Quotation</h3>
        <p>The site quotation table shows the calculations for the selected site.<br>The <a href="#consolidation">consolidated</a> figures for all of the sites are shown at the top right of the table.</p>

        <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">
            <div class="flex px-4 py-2">
                <div>
                    <button :class="!tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="!tab" @click="tab = 0" class="hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 1
                    </button>
                </div>                    
                <div>
                    <button :class="1==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="1==tab" @click="tab = 1" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 2
                    </button>
                </div>                    
                <div>
                    <button :class="2==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="2==tab" @click="tab = 2" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 3
                    </button>
                </div>
            </div>
        </div>


        <div x-data="simpleNoSheetTable('activeTable')" class="w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2">
                    <tr class="text-center">
                        <th x-init="columns.push('item')" class="w-1/6 px-4 py-2 text-left">Item</th>
                        <th x-init="columns.push('steel_m2')" class="w-1/6  px-4 py-2">Steel Used m<sup>2</sup></th>
                        <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                        <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                        <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                        <th x-init="columns.push('line_cost')" class="px-4 py-2 text-center">Line Cost</th>
                        <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                        <th x-init="columns.push('gross_margin')" class="px-4 py-2 ">Gross Margin</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3 pr-4" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="[2,3].includes(column_index)">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,4,5,6].includes(column_index)">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                    </template>                                        

                                    <template x-if="column_index == 7">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th></th>
                    </tr>
                    <tr class="border-t-4">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Site Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </span>
                        </th>
                    </tr>
                    <tr>
                        <th colspan="*">&nbsp;</th>
                    </tr>
                    <tr>
                        <th colspan="5"></th>
                        <th class="text-left"colspan="*">For All Sites:</th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_cost')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_offer')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2"></th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray border-t-4">Profit:</th>
                        <th class="border-gray border-t-4 text-right" x-data="consolidation('profit')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray border-t-4">
                            <div x-data="consolidation('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="consolidation('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->
        <h3>Steel suppliers</h3>
        <p>The steel suppliers table calculates the average cost of supply based on the purchase and transportation costs from several suppliers using the <a href="#steel_suppliers">steel_suppliers</a> facet.</p>

        <div x-data="simpleNoSheetTable('steelSuppliers')" class="w-2/3 flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th x-init="columns.push('supplier')" class="w-1/6 px-4 py-2 text-left">Supplier</th>
                        <th x-init="columns.push('steel_m2')" class="w-2/6 px-4 py-2">Steel Cost<br>m<sup>2</sup></th>
                        <th x-init="columns.push('transport_m2')" class="w-2/6 px-4 py-2">Transport Cost m<sup>2</sup></th>
                        <th x-init="columns.push('cost_per_m2')" class="px-4 py-2">Supplier Cost m<sup>2</sup></th> 
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="pr-4 py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,2].includes(column_index)">
                                        <input type="number" min="0" step="0.1" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>                                                                            

                                    <template x-if="3 == column_index">
                                        <div x-text="item[column_index].toFixed(3)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(3))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th>Average:</th>
                        <th>
                            <div x-data="aggregate('average_cost_per_m2')" x-text="Number(value).toFixed(3)" class="text-right"></div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet tables:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//load the data
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">data1</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site1.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      <span class="nx">data2</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site2.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      <span class="nx">data3</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site3.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      <span class="nx">data4</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;steel_suppliers.json&#39;</span><span class="p">);</span> 
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//create and define the stack; which acts as a table factory and allows us to use consolidation facets
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">site_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site1&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">site_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site2&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">site_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site3&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1">//set the facets used by the stack
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">addFacets</span><span class="p">(</span><span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="c1">//set a consolidation facet
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">consolidation</span><span class="p">);</span>            
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="c1">//populate the tables
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="c1"></span><span class="nx">site_1</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data1</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="nx">site_2</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="nx">site_3</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data3</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="c1">//Create a table for the steel suppliers
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">suppliers</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;supplier&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;transport_m2&#39;</span><span class="p">],</span> <span class="nx">steel_suppliers</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="c1">//load and calculate
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="c1"></span><span class="nx">suppliers</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data4</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="nx">suppliers</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="c1">//Set the average_steel_cost_m2 reference required by the raw_materials facets to use
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="c1">//the average_cost_per_m2 aggregate from the suppliers table
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">setDefaultReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">suppliers</span><span class="p">).</span><span class="nx">average_cost_per_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="p">});</span>  
</span></span></code></pre></div>
<h3>The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="consolidation">The consolidation facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Consolidate table stack line items
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} columns   Table columns query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm">     * The total cost of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="cm">     * The total offer price of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="cm">     * Total profit
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">profit</span>      <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>            
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="steel_suppliers">The steel_suppliers facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate steel supply costs
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">transport_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">average_cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">AVERAGE</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;cost_per_m2&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
   
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Example 3 - Stacks, Consolidation &amp; References</title>
      <link>http://localhost:1313/noSheetLibrary/examples/example-3.html</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetLibrary/examples/example-3.html</guid>
      <description>&lt;script&gt;&#xD;&#xA;const SUM     = formulajs.SUM,&#xD;&#xA;      AVERAGE = formulajs.AVERAGE;&#xD;&#xA;&#xD;&#xA;var percent_format  = new Intl.NumberFormat(undefined, {style: &#34;percent&#34;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {defineStack, createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        //the facets&#xD;&#xA;        const {default: raw_materials}   = await import(&#39;js/examples/facets/raw_materials.mjs&#39;);&#xD;&#xA;        const {default: lineitems}       = await import(&#39;js/examples/facets/lineitems.mjs&#39;);&#xD;&#xA;        const {default: gross_margin}    = await import(&#39;js/examples/facets/gross_margin.mjs&#39;);        &#xD;&#xA;        const {default: steel_suppliers} = await import(&#39;js/examples/facets/steel_suppliers.mjs&#39;);        &#xD;&#xA;        const {default: consolidation}   = await import(&#39;js/examples/facets/consolidation.mjs&#39;);    &#xD;&#xA;&#xD;&#xA;        //load the data&#xD;&#xA;        const data1 = await loadJSON(&#39;js/examples/data/example_1.json&#39;),&#xD;&#xA;              data2 = await loadJSON(&#39;js/examples/data/example_3_site_2.json&#39;),&#xD;&#xA;              data3 = await loadJSON(&#39;js/examples/data/example_3_site_3.json&#39;),&#xD;&#xA;              data4 = await loadJSON(&#39;js/examples/data/example_3_steel_suppliers.json&#39;); &#xD;&#xA;        &#xD;&#xA;        //&#xD;&#xA;        //create and define the stack, which acts as a table factory and allows us to use consolidation facets&#xD;&#xA;        //        &#xD;&#xA;        let stack = defineStack(&#39;item&#39;, &#39;steel_m2&#39;, &#39;unit_offer&#39;, &#39;quantity&#39;),&#xD;&#xA;            site_1 = stack.createTable(&#39;site1&#39;),&#xD;&#xA;            site_2 = stack.createTable(&#39;site2&#39;),&#xD;&#xA;            site_3 = stack.createTable(&#39;site3&#39;);&#xD;&#xA;&#xD;&#xA;        //set the facets used by the stack&#xD;&#xA;        stack.addFacets(raw_materials, lineitems, gross_margin);&#xD;&#xA;&#xD;&#xA;        //set a consolidation facet&#xD;&#xA;        stack.consolidate(consolidation);            &#xD;&#xA;&#xD;&#xA;        //&#xD;&#xA;        //populate the tables&#xD;&#xA;        //&#xD;&#xA;        site_1.load(data1);&#xD;&#xA;        site_2.load(data2);&#xD;&#xA;        site_3.load(data3);&#xD;&#xA;&#xD;&#xA;        //Create a table for the steel suppliers&#xD;&#xA;        let suppliers = createTable([&#39;supplier&#39;, &#39;steel_m2&#39;, &#39;transport_m2&#39;], steel_suppliers);&#xD;&#xA;&#xD;&#xA;        //load and calculate&#xD;&#xA;        suppliers.load(data4);&#xD;&#xA;        suppliers.calculate();&#xD;&#xA;&#xD;&#xA;        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use&#xD;&#xA;        //the average_cost_per_m2 aggregate from the suppliers table&#xD;&#xA;        stack.setDefaultReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;&#xD;&#xA;        });  &#xD;&#xA;&#xD;&#xA;        resolve( [stack, site_1, site_2, site_3, suppliers] );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;function referenceHandler(referenceName){&#xD;&#xA;    return {&#xD;&#xA;&#xD;&#xA;        init() {&#xD;&#xA;&#xD;&#xA;            //watch the store for reference initialization&#xD;&#xA;            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=&gt;{&#xD;&#xA;                this.value = newHandler.value;&#xD;&#xA;            })&#xD;&#xA;        },&#xD;&#xA;        value: &#39;&#39;,&#xD;&#xA;        input: {&#xD;&#xA;            [&#39;@input&#39;](event) {&#xD;&#xA;                Alpine.store(referenceName).value = +event.srcElement.value;&#xD;&#xA;            },&#xD;&#xA;        },        &#xD;&#xA;    };                   &#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;let unavailable = Symbol(&#39;unavailable&#39;);&#xD;&#xA;&#xD;&#xA;function ifAvailable(obj, fn){&#xD;&#xA;&#xD;&#xA;    let isAvailable = obj !== unavailable;&#xD;&#xA;&#xD;&#xA;    return fn &amp;&amp; isAvailable ? fn(obj) : isAvailable;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    Alpine.data(&#39;consolidation&#39;, (name, formatter) =&gt; ({&#xD;&#xA;&#xD;&#xA;        init(){&#xD;&#xA;            //watch the store&#xD;&#xA;            this.$watch(`$store.consolidated`,(new_value, old_value)=&gt;{           &#xD;&#xA;    &#xD;&#xA;                this.calculatedValue = Alpine.store(&#39;siteStack&#39;)[name].valueOf();&#xD;&#xA;            });                &#xD;&#xA;        },&#xD;&#xA;&#xD;&#xA;        calculatedValue: undefined,&#xD;&#xA;&#xD;&#xA;        get value() {&#xD;&#xA;&#xD;&#xA;            let v = this.calculatedValue ?? Alpine.store(&#39;siteStack&#39;)[name]?.valueOf();&#xD;&#xA;&#xD;&#xA;            return !formatter ? v : formatter.format(v);&#xD;&#xA;        },        &#xD;&#xA;    }));&#xD;&#xA;&#xD;&#xA;    Alpine.store(&#39;steelSuppliers&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;activeTable&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;siteStack&#39;, unavailable);&#xD;&#xA;    Alpine.store(&#39;consolidated&#39;, 0);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        //Define some reference handles&#xD;&#xA;        Alpine.store(&#39;low_margin_threshold&#39;, theStack.tables().getReferenceHandle(&#39;low_margin_threshold&#39;, 30) );&#xD;&#xA;        Alpine.store(&#39;manufacturing_cost_per_m2&#39;, theStack.tables().getReferenceHandle(&#39;manufacturing_cost_per_m2&#39;, 0.3) );&#xD;&#xA;&#xD;&#xA;        //set the consolidation refernces to mirror the table consolidation handle&#xD;&#xA;        theStack.setConsolidationReferences( function(uses) {&#xD;&#xA;&#xD;&#xA;            this.low_margin_threshold = Alpine.store(&#39;low_margin_threshold&#39;).value;&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //increment the consolidation tick to force UI update&#xD;&#xA;        theStack.afterConsolidation( _ =&gt; {&#xD;&#xA;            Alpine.store(&#39;consolidated&#39;, Alpine.store(&#39;consolidated&#39;) + 1);&#xD;&#xA;         });&#xD;&#xA;&#xD;&#xA;        theStack.tables().calculate();    &#xD;&#xA;&#xD;&#xA;        //update the store with the init&#39;d objects&#xD;&#xA;        Alpine.store(&#39;siteStack&#39;, theStack);&#xD;&#xA;        Alpine.store(&#39;activeTable&#39;, site1);&#xD;&#xA;        Alpine.store(&#39;steelSuppliers&#39;, suppliers);&#xD;&#xA;    });&#xD;&#xA;});       &#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34; x-data=&#34;{tab: 0}&#34; x-effect=&#34;ifAvailable($store.siteStack, _ =&gt; Alpine.store(&#39;activeTable&#39;, $store.siteStack.getUniqueTable(`site${tab+1}`)))&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Extending the Quote Calculator to handle multiple sites and multiple suppliers&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;grid grid-cols-2 gap-4 items-start justify-center w-full&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                &lt;div&gt;&#xD;&#xA;                    &lt;p class=&#34;justify-normal&#34;&gt;Change the manufacturing cost for all line items by adjusting the &lt;code&gt;manufacturing_cost_per_m2&lt;/code&gt; parameter in the &lt;a href=&#34;#raw_materials&#34;&gt;raw_materials&lt;/a&gt; facet&lt;/p&gt;</description><content:encoded><![CDATA[

    
<script>
const SUM     = formulajs.SUM,
      AVERAGE = formulajs.AVERAGE;

var percent_format  = new Intl.NumberFormat(undefined, {style: "percent"});

//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {defineStack, createTable} = await import('js/nosheet.min.mjs');

        //the facets
        const {default: raw_materials}   = await import('js/examples/facets/raw_materials.mjs');
        const {default: lineitems}       = await import('js/examples/facets/lineitems.mjs');
        const {default: gross_margin}    = await import('js/examples/facets/gross_margin.mjs');        
        const {default: steel_suppliers} = await import('js/examples/facets/steel_suppliers.mjs');        
        const {default: consolidation}   = await import('js/examples/facets/consolidation.mjs');    

        //load the data
        const data1 = await loadJSON('js/examples/data/example_1.json'),
              data2 = await loadJSON('js/examples/data/example_3_site_2.json'),
              data3 = await loadJSON('js/examples/data/example_3_site_3.json'),
              data4 = await loadJSON('js/examples/data/example_3_steel_suppliers.json'); 
        
        //
        //create and define the stack, which acts as a table factory and allows us to use consolidation facets
        //        
        let stack = defineStack('item', 'steel_m2', 'unit_offer', 'quantity'),
            site_1 = stack.createTable('site1'),
            site_2 = stack.createTable('site2'),
            site_3 = stack.createTable('site3');

        //set the facets used by the stack
        stack.addFacets(raw_materials, lineitems, gross_margin);

        //set a consolidation facet
        stack.consolidate(consolidation);            

        //
        //populate the tables
        //
        site_1.load(data1);
        site_2.load(data2);
        site_3.load(data3);

        //Create a table for the steel suppliers
        let suppliers = createTable(['supplier', 'steel_m2', 'transport_m2'], steel_suppliers);

        //load and calculate
        suppliers.load(data4);
        suppliers.calculate();

        //Set the average_steel_cost_m2 reference required by the raw_materials facets to use
        //the average_cost_per_m2 aggregate from the suppliers table
        stack.setDefaultReferences( function(uses) {

            this.average_steel_cost_m2 = uses(suppliers).average_cost_per_m2;
        });  

        resolve( [stack, site_1, site_2, site_3, suppliers] );
    })()        
});

function referenceHandler(referenceName){
    return {

        init() {

            //watch the store for reference initialization
            this.$watch(`$store.${referenceName}`,(newHandler, oldHandler)=>{
                this.value = newHandler.value;
            })
        },
        value: '',
        input: {
            ['@input'](event) {
                Alpine.store(referenceName).value = +event.srcElement.value;
            },
        },        
    };                   
};

let unavailable = Symbol('unavailable');

function ifAvailable(obj, fn){

    let isAvailable = obj !== unavailable;

    return fn && isAvailable ? fn(obj) : isAvailable;
}

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    Alpine.data('consolidation', (name, formatter) => ({

        init(){
            //watch the store
            this.$watch(`$store.consolidated`,(new_value, old_value)=>{           
    
                this.calculatedValue = Alpine.store('siteStack')[name].valueOf();
            });                
        },

        calculatedValue: undefined,

        get value() {

            let v = this.calculatedValue ?? Alpine.store('siteStack')[name]?.valueOf();

            return !formatter ? v : formatter.format(v);
        },        
    }));

    Alpine.store('steelSuppliers', unavailable);
    Alpine.store('activeTable', unavailable);
    Alpine.store('siteStack', unavailable);
    Alpine.store('consolidated', 0);

    whenNoSheetReady.then( ([theStack, site1, site2, site3, suppliers]) => {

        console.log('whenNoSheetReady');

        //Define some reference handles
        Alpine.store('low_margin_threshold', theStack.tables().getReferenceHandle('low_margin_threshold', 30) );
        Alpine.store('manufacturing_cost_per_m2', theStack.tables().getReferenceHandle('manufacturing_cost_per_m2', 0.3) );

        //set the consolidation refernces to mirror the table consolidation handle
        theStack.setConsolidationReferences( function(uses) {

            this.low_margin_threshold = Alpine.store('low_margin_threshold').value;
        });

        //increment the consolidation tick to force UI update
        theStack.afterConsolidation( _ => {
            Alpine.store('consolidated', Alpine.store('consolidated') + 1);
         });

        theStack.tables().calculate();    

        //update the store with the init'd objects
        Alpine.store('siteStack', theStack);
        Alpine.store('activeTable', site1);
        Alpine.store('steelSuppliers', suppliers);
    });
});       
</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full" x-data="{tab: 0}" x-effect="ifAvailable($store.siteStack, _ => Alpine.store('activeTable', $store.siteStack.getUniqueTable(`site${tab+1}`)))">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Extending the Quote Calculator to handle multiple sites and multiple suppliers</h2>

        <div class="grid grid-cols-2 gap-4 items-start justify-center w-full">
            <div class="flex px-4">
                <div>
                    <p class="justify-normal">Change the manufacturing cost for all line items by adjusting the <code>manufacturing_cost_per_m2</code> parameter in the <a href="#raw_materials">raw_materials</a> facet</p>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <p>Set a minimum Margin Threshold for the quote through the <code>low_margin_threshold</code> parameter in the <a href="#gross_margin">gross_margin</a> facet</p>                    
                </div>
            </div>
        </div>        

        <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">
            <div class="flex px-4">
                <div>
                    <label for="Manufacturing_Cost">Manufacturing Cost:</label>
                    <input id="Manufacturing_Cost" x-data="referenceHandler('manufacturing_cost_per_m2')" x-model="value" type="number" min="0" max="100" step="0.1" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                    <label for="Manufacturing_Cost">per m<sup>2</sup></label>
                </div>
            </div>

            <div class="flex px-4">
                <div>
                    <label for="Margin_Threshold">Margin Threshold:</label>
                    <input id="Margin_Threshold" x-data="referenceHandler('low_margin_threshold')" x-model="value" type="number" min="0" max="100" x-bind="input" class="text-right w-12 border-gray-200 border-2">            
                </div>
            </div>
        </div>        

        <h3>Site Quotation</h3>
        <p>The site quotation table shows the calculations for the selected site.<br>The <a href="#consolidation">consolidated</a> figures for all of the sites are shown at the top right of the table.</p>

        <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">
            <div class="flex px-4 py-2">
                <div>
                    <button :class="!tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="!tab" @click="tab = 0" class="hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 1
                    </button>
                </div>                    
                <div>
                    <button :class="1==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="1==tab" @click="tab = 1" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 2
                    </button>
                </div>                    
                <div>
                    <button :class="2==tab ? 'bg-blue-100' : 'bg-transparent'" :disabled="2==tab" @click="tab = 2" class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mr-10">
                    Site 3
                    </button>
                </div>
            </div>
        </div>


        <div x-data="simpleNoSheetTable('activeTable')" class="w-full flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2">
                    <tr class="text-center">
                        <th x-init="columns.push('item')" class="w-1/6 px-4 py-2 text-left">Item</th>
                        <th x-init="columns.push('steel_m2')" class="w-1/6  px-4 py-2">Steel Used m<sup>2</sup></th>
                        <th x-init="columns.push('unit_cost')" class="px-4 py-2">Item Cost</th>
                        <th x-init="columns.push('unit_offer')" class="px-4 py-2">Unit Price</th>
                        <th x-init="columns.push('quantity')" class="px-4 py-2">Quantity</th>
                        <th x-init="columns.push('line_cost')" class="px-4 py-2 text-center">Line Cost</th>
                        <th x-init="columns.push('line_offer')" class="px-4 py-2">Line Offer</th>
                        <th x-init="columns.push('gross_margin')" class="px-4 py-2 ">Gross Margin</th>
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="py-3 pr-4" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="[2,3].includes(column_index)">
                                        <input type="number" min="0" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>
                                    
                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,4,5,6].includes(column_index)">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="item[column_index].toFixed(2)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(2))" class="text-right"></div>                                            
                                    </template>                                        

                                    <template x-if="column_index == 7">
                                        <!--Update on calculation--> <!-- calculation may occur during load/unload in which case items[row_index] may be 'undefined' -->
                                        <div x-text="percent_format.format(item[column_index])" x-init="$watch('calculationTick', _ => $el.innerHTML = percent_format.format(items[row_index]?.[column_index]))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>
                            <div x-data="aggregate('total_cost')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <div x-data="aggregate('total_offer')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th></th>
                    </tr>
                    <tr class="border-t-4">
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th>Site Profit:</th>
                        <th>
                            <div x-data="aggregate('profit')" x-text="Number(value).toFixed(2)" class="text-right"></div>
                        </th>
                        <th>
                            <span x-data="aggregate('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="aggregate('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </span>
                        </th>
                    </tr>
                    <tr>
                        <th colspan="*">&nbsp;</th>
                    </tr>
                    <tr>
                        <th colspan="5"></th>
                        <th class="text-left"colspan="*">For All Sites:</th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_cost')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2 text-right" x-data="consolidation('total_offer')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray-200 border-b-2"></th>
                    </tr>
                    <tr class="text-center">
                        <th class="text-right" colspan="5"></th>
                        <th class="border-gray border-t-4">Profit:</th>
                        <th class="border-gray border-t-4 text-right" x-data="consolidation('profit')" x-text="Number(value).toFixed(2)"></th>
                        <th class="border-gray border-t-4">
                            <div x-data="consolidation('low_margin_warning')" :class="value ? 'text-red-600' : 'text-green-600'">
                                <div x-data="consolidation('gross_margin', percent_format)" x-text="value" class="text-right"></div>
                            </div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->
        <h3>Steel suppliers</h3>
        <p>The steel suppliers table calculates the average cost of supply based on the purchase and transportation costs from several suppliers using the <a href="#steel_suppliers">steel_suppliers</a> facet.</p>

        <div x-data="simpleNoSheetTable('steelSuppliers')" class="w-2/3 flex flex-col">
            <table class="table-fixed" width="100%" :class="storeId" x-data="{columns:[]}">
                <thead class="border-b-2 text-gray-800">
                    <tr class="text-center">
                        <th x-init="columns.push('supplier')" class="w-1/6 px-4 py-2 text-left">Supplier</th>
                        <th x-init="columns.push('steel_m2')" class="w-2/6 px-4 py-2">Steel Cost<br>m<sup>2</sup></th>
                        <th x-init="columns.push('transport_m2')" class="w-2/6 px-4 py-2">Transport Cost m<sup>2</sup></th>
                        <th x-init="columns.push('cost_per_m2')" class="px-4 py-2">Supplier Cost m<sup>2</sup></th> 
                    </tr>    
                </thead>
                <tbody>
                    <template x-for="(item, row_index) in items" :key="row_index">
                        <tr :id="`${storeId}-row[${row_index}]`" class="hover:bg-gray-200 dark:hover:bg-gray-900 text-xs">
                            <template x-for="(column_name, html_column_index) in columns">
                                <td x-data="{column_index: storedTable.columnIndex(column_name)}" class="pr-4 py-3" :class="`col_${column_name}`" :id="`${storeId}_cell[${row_index}][${column_index}]`">

                                    <template x-if="!column_index">
                                        <!--Don't update on calculation-->
                                        <span x-text="item[column_index]"></span>                                            
                                    </template>                                        

                                    <template x-if="[1,2].includes(column_index)">
                                        <input type="number" min="0" step="0.1" :value="item[column_index]" @input="setCellValue(row_index, column_index, +$el.value)" class="text-right w-5/6 ml-2 border-gray-200 border-2">
                                    </template>                                                                            

                                    <template x-if="3 == column_index">
                                        <div x-text="item[column_index].toFixed(3)" x-init="$watch('calculationTick', _ => $el.innerHTML = items[row_index]?.[column_index].toFixed(3))" class="text-right"></div>                                            
                                    </template>                                        

                                </td>
                            </template>
                        </tr>
                    </template>
                    <tr x-show="isEmpty">
                        <td colspan="5" class="text-center py-3 text-sm">No matching records found.</td>
                    </tr>
                </tbody>
                <tfoot class="border-t-4 text-gray-800">    
                    <tr>
                        <th></th>
                        <th></th>
                        <th>Average:</th>
                        <th>
                            <div x-data="aggregate('average_cost_per_m2')" x-text="Number(value).toFixed(3)" class="text-right"></div>
                        </th>
                    </tr>
                </tfoot>
            </table>

        </div> <!-- simpleTable()-->

        <div class="container mx-auto w-full h-full">
<h3 id="init">Create and populate the noSheet tables:</h3>                        
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">//load the data
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">data1</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site1.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">      <span class="nx">data2</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site2.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      <span class="nx">data3</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;site3.json&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">      <span class="nx">data4</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">loadJSON</span><span class="p">(</span><span class="s1">&#39;steel_suppliers.json&#39;</span><span class="p">);</span> 
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1">//create and define the stack; which acts as a table factory and allows us to use consolidation facets
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="c1">//        
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;unit_offer&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">site_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site1&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">site_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site2&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">site_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site3&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="c1">//set the facets used by the stack
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">addFacets</span><span class="p">(</span><span class="nx">raw_materials</span><span class="p">,</span> <span class="nx">lineitems</span><span class="p">,</span> <span class="nx">gross_margin</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="c1">//set a consolidation facet
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">consolidation</span><span class="p">);</span>            
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="c1">//populate the tables
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="c1"></span><span class="nx">site_1</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data1</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="nx">site_2</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="nx">site_3</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data3</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="c1">//Create a table for the steel suppliers
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">suppliers</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;supplier&#39;</span><span class="p">,</span> <span class="s1">&#39;steel_m2&#39;</span><span class="p">,</span> <span class="s1">&#39;transport_m2&#39;</span><span class="p">],</span> <span class="nx">steel_suppliers</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="c1">//load and calculate
</span></span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="c1"></span><span class="nx">suppliers</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data4</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="nx">suppliers</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="c1">//Set the average_steel_cost_m2 reference required by the raw_materials facets to use
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="c1">//the average_cost_per_m2 aggregate from the suppliers table
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">setDefaultReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">suppliers</span><span class="p">).</span><span class="nx">average_cost_per_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="p">});</span>  
</span></span></code></pre></div>
<h3>The raw_materials facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate line item cost from raw materials
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">refs</span><span class="p">.</span><span class="nx">manufacturing_cost_per_m2</span> <span class="o">+</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">average_steel_cost_m2</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The lineitems facet:</h3>



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">A simple invoice/quotation calculator
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">line_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_quantity</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span>     <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">profit</span>         <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3>The gross_margin facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Calculate the gross margin for line items and for the whole table
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} table     Table query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} row       The table row
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * The row Gross Margin
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">gross_margin</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span> <span class="o">/</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="nx">table</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cm">     */</span>    
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">table</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="consolidation">The consolidation facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Consolidate table stack line items
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * 
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> * @param {*} columns   Table columns query object
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> * @param {*} refs      External references
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm">     * The total cost of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_cost&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="cm">     * The total offer price of all the line items in the table stack
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;line_offer&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="cm">     * Total profit
</span></span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">profit</span>      <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="cm">     * The total Gross Margin
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="cm">     * @returns number
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">total_cost</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">total_offer</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="cm">     * Returns true if the total Gross Margin is below the system threshold
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="cm">     * @returns boolean
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">low_margin_warning</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">gross_margin</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">low_margin_threshold</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>            
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
<h3 id="steel_suppliers">The steel_suppliers facet:</h3>    



<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="cm">Calculate steel supply costs
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">steel_m2</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">transport_m2</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">average_cost_per_m2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">AVERAGE</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;cost_per_m2&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">};</span></span></span></code></pre></div>
   
        </div>

    </div>
</div>


  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>


]]></content:encoded></item><item>
      <title>Roadmap</title>
      <link>http://localhost:1313/pages/roadmap/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/pages/roadmap/</guid>
      <description>&lt;h2 id=&#34;v08-initial-release&#34;&gt;v0.8 Initial Release&lt;/h2&gt;&#xA;&lt;h4 id=&#34;-you-are-here&#34;&gt;&amp;laquo;&amp;laquo; You are here&lt;/h4&gt;&#xA;&lt;h3 id=&#34;v09-back-end-examples&#34;&gt;v0.9 Back-end examples&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a few backend examples using the latest shiny framework.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;v10-production-release&#34;&gt;v1.0 Production release&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Have noSheet running on a live site other than the example and test spec pages.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;v11-consolidation-tweaks&#34;&gt;v1.1 Consolidation tweaks&lt;/h3&gt;&#xA;&lt;h3 id=&#34;v12-table-data-manipulation&#34;&gt;v1.2 Table data manipulation&lt;/h3&gt;</description><content:encoded><![CDATA[<h2 id="v08-initial-release">v0.8 Initial Release</h2>
<h4 id="-you-are-here">&laquo;&laquo; You are here</h4>
<h3 id="v09-back-end-examples">v0.9 Back-end examples</h3>
<ul>
<li>Add a few backend examples using the latest shiny framework.</li>
</ul>
<h2 id="v10-production-release">v1.0 Production release</h2>
<ul>
<li>Have noSheet running on a live site other than the example and test spec pages.</li>
</ul>
<h3 id="v11-consolidation-tweaks">v1.1 Consolidation tweaks</h3>
<h3 id="v12-table-data-manipulation">v1.2 Table data manipulation</h3>
]]></content:encoded></item><item>
      <title>Stress Test</title>
      <link>http://localhost:1313/examples/stress-test/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/examples/stress-test/</guid>
      <description>&lt;script&gt;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        let stress_table = createTable(&#xD;&#xA;                                        [&#39;seed&#39;], &#xD;&#xA;                                        function(table, row, refs) {&#xD;&#xA;                                            &#xD;&#xA;                                            for(let i = 1; i &lt;= refs.columns; i++){&#xD;&#xA;&#xD;&#xA;                                                row[i] = () =&gt; (row.seed + i)/refs.factor;&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                    );&#xD;&#xA;&#xD;&#xA;        stress_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.factor = 1/3;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        resolve( stress_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        let column_reference = theTable.getReferenceHandle(&#39;columns&#39;, 10);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;noSheetTable&#39;, {&#xD;&#xA;&#xD;&#xA;            timerId : 0,&#xD;&#xA;            samples : [],&#xD;&#xA;            profile(rows, columns, max_samples) {&#xD;&#xA;&#xD;&#xA;                this.samples = [];    &#xD;&#xA;                clearInterval(this.timerId);&#xD;&#xA;&#xD;&#xA;                theTable.unload();&#xD;&#xA;                theTable.load( Array.from({length: rows}, _ =&gt; [Math.random()]) );&#xD;&#xA;&#xD;&#xA;                //this will force a recalc&#xD;&#xA;                column_reference.value = columns;&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            },&#xD;&#xA;&#xD;&#xA;            calculate(max_samples){&#xD;&#xA;&#xD;&#xA;                //this will force a recalculation&#xD;&#xA;                let mark = window.performance.now();&#xD;&#xA;&#xD;&#xA;                theTable.calculate();&#xD;&#xA;&#xD;&#xA;                this.samples.push([window.performance.now() - mark]);&#xD;&#xA;&#xD;&#xA;                if( this.samples.length &gt; max_samples){&#xD;&#xA;&#xD;&#xA;                    this.samples.shift();&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                drawChart();&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;    google.charts.load(&#34;current&#34;, {packages:[&#34;corechart&#34;]});&#xD;&#xA;    google.charts.setOnLoadCallback(drawChart);&#xD;&#xA;&#xD;&#xA;    var options = {&#xD;&#xA;        legend: { position: &#39;none&#39; },&#xD;&#xA;        colors: [&#39;#4285F4&#39;],&#xD;&#xA;&#xD;&#xA;        chartArea: { width: &#39;90%&#39; },&#xD;&#xA;        hAxis: {&#xD;&#xA;            viewWindowMode: &#39;pretty&#39;,&#xD;&#xA;            title: &#39;execution time in ms&#39;,&#xD;&#xA;            format: &#39;#.#&#39;,&#xD;&#xA;            slantedTextAngle : 75,&#xD;&#xA;            textStyle: {&#xD;&#xA;                fontSize: 12&#xD;&#xA;            },&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        vAxis :{&#xD;&#xA;            title: &#39;count&#39;,&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        bar: { gap: 0 },&#xD;&#xA;&#xD;&#xA;        histogram: {&#xD;&#xA;            bucketSize: 0.01,&#xD;&#xA;            maxNumBuckets: 100,&#xD;&#xA;            minValue: 0,&#xD;&#xA;            maxValue: 1&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    function drawChart() {&#xD;&#xA;        /*        &#xD;&#xA;        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame&#xD;&#xA;        https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;        */        &#xD;&#xA;&#xD;&#xA;        var data = new google.visualization.DataTable();&#xD;&#xA;&#xD;&#xA;        data.addColumn(&#39;number&#39;, &#39;Time(ms)&#39;);&#xD;&#xA;        data.addRows( Alpine.store(&#39;noSheetTable&#39;)?.samples??[] );&#xD;&#xA;&#xD;&#xA;        var chart = new google.visualization.Histogram(document.getElementById(&#39;chart_div&#39;));&#xD;&#xA;        chart.draw(data, options);&#xD;&#xA;    }&#xD;&#xA;});       &#xD;&#xA;&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Stress Test&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;span x-data=&#34;{rows:1000, columns:100, samples:1000}&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-auto w-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;div&gt;&#xD;&#xA;                        &lt;label for=&#34;columns&#34;&gt;Columns:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;columns&#34; x-model.number=&#34;columns&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                        &lt;label for=&#34;rows&#34;&gt;Rows:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;rows&#34; x-model.number=&#34;rows&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;label for=&#34;samples&#34;&gt;Max Samples:&lt;/label&gt;&#xD;&#xA;                    &lt;input id=&#34;samples&#34; x-model.number=&#34;samples&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-18 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &amp;nbsp;&#xD;&#xA;                    &lt;button class=&#34;bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded&#34; x-data=&#34;{title: &#39;Start&#39;}&#34; @click=&#34;$store.noSheetTable.profile(rows, columns, samples); title=&#39;Restart&#39;;&#34; x-text=&#34;title&#34;&gt;&lt;/button&gt;                        &#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;        &#xD;&#xA;        &lt;/span&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;            &lt;h3 class=&#34;text-center&#34;&gt;Performance Histogram&lt;/h3&gt;                        &#xD;&#xA;            &lt;div id=&#34;chart_div&#34;&gt;&lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setReferences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;  &lt;script src=&#34;https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;</description><content:encoded><![CDATA[
<script>
//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {createTable} = await import('js/nosheet.min.mjs');

        let stress_table = createTable(
                                        ['seed'], 
                                        function(table, row, refs) {
                                            
                                            for(let i = 1; i <= refs.columns; i++){

                                                row[i] = () => (row.seed + i)/refs.factor;
                                            }
                                        }
                                    );

        stress_table.setReferences( function() {

            this.factor = 1/3;
        });    

        resolve( stress_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        let column_reference = theTable.getReferenceHandle('columns', 10);

        Alpine.store('noSheetTable', {

            timerId : 0,
            samples : [],
            profile(rows, columns, max_samples) {

                this.samples = [];    
                clearInterval(this.timerId);

                theTable.unload();
                theTable.load( Array.from({length: rows}, _ => [Math.random()]) );

                //this will force a recalc
                column_reference.value = columns;

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            },

            calculate(max_samples){

                //this will force a recalculation
                let mark = window.performance.now();

                theTable.calculate();

                this.samples.push([window.performance.now() - mark]);

                if( this.samples.length > max_samples){

                    this.samples.shift();
                }

                drawChart();

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            }
        });

        //https://developers.google.com/chart/interactive/docs/gallery/histogram
    });

    google.charts.load("current", {packages:["corechart"]});
    google.charts.setOnLoadCallback(drawChart);

    var options = {
        legend: { position: 'none' },
        colors: ['#4285F4'],

        chartArea: { width: '90%' },
        hAxis: {
            viewWindowMode: 'pretty',
            title: 'execution time in ms',
            format: '#.#',
            slantedTextAngle : 75,
            textStyle: {
                fontSize: 12
            },
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        vAxis :{
            title: 'count',
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        bar: { gap: 0 },

        histogram: {
            bucketSize: 0.01,
            maxNumBuckets: 100,
            minValue: 0,
            maxValue: 1
        }
    };

    function drawChart() {
        /*        
        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame
        https://developers.google.com/chart/interactive/docs/gallery/histogram
        */        

        var data = new google.visualization.DataTable();

        data.addColumn('number', 'Time(ms)');
        data.addRows( Alpine.store('noSheetTable')?.samples??[] );

        var chart = new google.visualization.Histogram(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
});       

</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Stress Test</h2>

        <span x-data="{rows:1000, columns:100, samples:1000}">
            <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">

                <div class="flex px-4">
                    <div>
                        <label for="columns">Columns:</label>
                        <input id="columns" x-model.number="columns" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                        <label for="rows">Rows:</label>
                        <input id="rows" x-model.number="rows" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                    </div>
                </div>

                <div class="flex px-4">
                    <label for="samples">Max Samples:</label>
                    <input id="samples" x-model.number="samples" type="number" min="1" class="text-right w-18 border-gray-200 border-2">            
                    &nbsp;
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded" x-data="{title: 'Start'}" @click="$store.noSheetTable.profile(rows, columns, samples); title='Restart';" x-text="title"></button>                        
                </div>
            </div>        
        </span>

        <div class="container mx-auto w-full h-full">

            <h3 class="text-center">Performance Histogram</h3>                        
            <div id="chart_div"></div>
        </div>

        <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">let</span> <span class="nx">stress_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">                        <span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">],</span> 
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">                        <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>                                    
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">                            <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">columns</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">                                <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">seed</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">refs</span><span class="p">.</span><span class="nx">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">                    <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">stress_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div>
    </div>
</div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
]]></content:encoded></item><item>
      <title>Stress Test</title>
      <link>http://localhost:1313/noSheetLibrary/examples/stress-test.html</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetLibrary/examples/stress-test.html</guid>
      <description>&lt;script&gt;&#xD;&#xA;//&#xD;&#xA;// Load the noSheet library, facets and create and populate a table&#xD;&#xA;//    &#xD;&#xA;var whenNoSheetReady = new Promise( (resolve) =&gt; {&#xD;&#xA;&#xD;&#xA;    (async () =&gt; {&#xD;&#xA;&#xD;&#xA;        //the library&#xD;&#xA;        const {createTable} = await import(&#39;js/nosheet.min.mjs&#39;);&#xD;&#xA;&#xD;&#xA;        let stress_table = createTable(&#xD;&#xA;                                        [&#39;seed&#39;], &#xD;&#xA;                                        function(table, row, refs) {&#xD;&#xA;                                            &#xD;&#xA;                                            for(let i = 1; i &lt;= refs.columns; i++){&#xD;&#xA;&#xD;&#xA;                                                row[i] = () =&gt; (row.seed + i)/refs.factor;&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                    );&#xD;&#xA;&#xD;&#xA;        stress_table.setReferences( function() {&#xD;&#xA;&#xD;&#xA;            this.factor = 1/3;&#xD;&#xA;        });    &#xD;&#xA;&#xD;&#xA;        resolve( stress_table );&#xD;&#xA;    })()        &#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;//&#xD;&#xA;//Plumb in Alpine&#xD;&#xA;//&#xD;&#xA;document.addEventListener(&#39;alpine:init&#39;, () =&gt; {&#xD;&#xA;&#xD;&#xA;    console.log(&#39;alpine:init&#39;);&#xD;&#xA;&#xD;&#xA;    whenNoSheetReady.then( (theTable) =&gt; {&#xD;&#xA;&#xD;&#xA;        console.log(&#39;whenNoSheetReady&#39;);&#xD;&#xA;&#xD;&#xA;        let column_reference = theTable.getReferenceHandle(&#39;columns&#39;, 10);&#xD;&#xA;&#xD;&#xA;        Alpine.store(&#39;noSheetTable&#39;, {&#xD;&#xA;&#xD;&#xA;            timerId : 0,&#xD;&#xA;            samples : [],&#xD;&#xA;            profile(rows, columns, max_samples) {&#xD;&#xA;&#xD;&#xA;                this.samples = [];    &#xD;&#xA;                clearInterval(this.timerId);&#xD;&#xA;&#xD;&#xA;                theTable.unload();&#xD;&#xA;                theTable.load( Array.from({length: rows}, _ =&gt; [Math.random()]) );&#xD;&#xA;&#xD;&#xA;                //this will force a recalc&#xD;&#xA;                column_reference.value = columns;&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            },&#xD;&#xA;&#xD;&#xA;            calculate(max_samples){&#xD;&#xA;&#xD;&#xA;                //this will force a recalculation&#xD;&#xA;                let mark = window.performance.now();&#xD;&#xA;&#xD;&#xA;                theTable.calculate();&#xD;&#xA;&#xD;&#xA;                this.samples.push([window.performance.now() - mark]);&#xD;&#xA;&#xD;&#xA;                if( this.samples.length &gt; max_samples){&#xD;&#xA;&#xD;&#xA;                    this.samples.shift();&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                drawChart();&#xD;&#xA;&#xD;&#xA;                this.timerId = window.setTimeout( &#xD;&#xA;                                            (obj) =&gt; obj.calculate(max_samples), &#xD;&#xA;                                            200,&#xD;&#xA;                                            this&#xD;&#xA;                                );&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;    google.charts.load(&#34;current&#34;, {packages:[&#34;corechart&#34;]});&#xD;&#xA;    google.charts.setOnLoadCallback(drawChart);&#xD;&#xA;&#xD;&#xA;    var options = {&#xD;&#xA;        legend: { position: &#39;none&#39; },&#xD;&#xA;        colors: [&#39;#4285F4&#39;],&#xD;&#xA;&#xD;&#xA;        chartArea: { width: &#39;90%&#39; },&#xD;&#xA;        hAxis: {&#xD;&#xA;            viewWindowMode: &#39;pretty&#39;,&#xD;&#xA;            title: &#39;execution time in ms&#39;,&#xD;&#xA;            format: &#39;#.#&#39;,&#xD;&#xA;            slantedTextAngle : 75,&#xD;&#xA;            textStyle: {&#xD;&#xA;                fontSize: 12&#xD;&#xA;            },&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        vAxis :{&#xD;&#xA;            title: &#39;count&#39;,&#xD;&#xA;            titleTextStyle: {&#xD;&#xA;                italic: false,&#xD;&#xA;                fontSize: 14&#xD;&#xA;            }&#xD;&#xA;        },&#xD;&#xA;        bar: { gap: 0 },&#xD;&#xA;&#xD;&#xA;        histogram: {&#xD;&#xA;            bucketSize: 0.01,&#xD;&#xA;            maxNumBuckets: 100,&#xD;&#xA;            minValue: 0,&#xD;&#xA;            maxValue: 1&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    function drawChart() {&#xD;&#xA;        /*        &#xD;&#xA;        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame&#xD;&#xA;        https://developers.google.com/chart/interactive/docs/gallery/histogram&#xD;&#xA;        */        &#xD;&#xA;&#xD;&#xA;        var data = new google.visualization.DataTable();&#xD;&#xA;&#xD;&#xA;        data.addColumn(&#39;number&#39;, &#39;Time(ms)&#39;);&#xD;&#xA;        data.addRows( Alpine.store(&#39;noSheetTable&#39;)?.samples??[] );&#xD;&#xA;&#xD;&#xA;        var chart = new google.visualization.Histogram(document.getElementById(&#39;chart_div&#39;));&#xD;&#xA;        chart.draw(data, options);&#xD;&#xA;    }&#xD;&#xA;});       &#xD;&#xA;&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;min-h-screen&#34;&gt;&#xD;&#xA;&lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;    &lt;div class=&#34;max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center&#34;&gt;&#xD;&#xA;&#xD;&#xA;        &lt;h2&gt;Stress Test&lt;/h2&gt;&#xD;&#xA;&#xD;&#xA;        &lt;span x-data=&#34;{rows:1000, columns:100, samples:1000}&#34;&gt;&#xD;&#xA;            &lt;div class=&#34;grid grid-cols-2 gap-4 justify-items-auto w-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;div&gt;&#xD;&#xA;                        &lt;label for=&#34;columns&#34;&gt;Columns:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;columns&#34; x-model.number=&#34;columns&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                        &lt;label for=&#34;rows&#34;&gt;Rows:&lt;/label&gt;&#xD;&#xA;                        &lt;input id=&#34;rows&#34; x-model.number=&#34;rows&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-14 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;                &lt;div class=&#34;flex px-4&#34;&gt;&#xD;&#xA;                    &lt;label for=&#34;samples&#34;&gt;Max Samples:&lt;/label&gt;&#xD;&#xA;                    &lt;input id=&#34;samples&#34; x-model.number=&#34;samples&#34; type=&#34;number&#34; min=&#34;1&#34; class=&#34;text-right w-18 border-gray-200 border-2&#34;&gt;            &#xD;&#xA;                    &amp;nbsp;&#xD;&#xA;                    &lt;button class=&#34;bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded&#34; x-data=&#34;{title: &#39;Start&#39;}&#34; @click=&#34;$store.noSheetTable.profile(rows, columns, samples); title=&#39;Restart&#39;;&#34; x-text=&#34;title&#34;&gt;&lt;/button&gt;                        &#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            &lt;/div&gt;        &#xD;&#xA;        &lt;/span&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;container mx-auto w-full h-full&#34;&gt;&#xD;&#xA;&#xD;&#xA;            &lt;h3 class=&#34;text-center&#34;&gt;Performance Histogram&lt;/h3&gt;                        &#xD;&#xA;            &lt;div id=&#34;chart_div&#34;&gt;&lt;/div&gt;&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;refs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;stress_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setReferences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;  &lt;script src=&#34;https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;</description><content:encoded><![CDATA[

    
<script>
//
// Load the noSheet library, facets and create and populate a table
//    
var whenNoSheetReady = new Promise( (resolve) => {

    (async () => {

        //the library
        const {createTable} = await import('js/nosheet.min.mjs');

        let stress_table = createTable(
                                        ['seed'], 
                                        function(table, row, refs) {
                                            
                                            for(let i = 1; i <= refs.columns; i++){

                                                row[i] = () => (row.seed + i)/refs.factor;
                                            }
                                        }
                                    );

        stress_table.setReferences( function() {

            this.factor = 1/3;
        });    

        resolve( stress_table );
    })()        
});

//
//Plumb in Alpine
//
document.addEventListener('alpine:init', () => {

    console.log('alpine:init');

    whenNoSheetReady.then( (theTable) => {

        console.log('whenNoSheetReady');

        let column_reference = theTable.getReferenceHandle('columns', 10);

        Alpine.store('noSheetTable', {

            timerId : 0,
            samples : [],
            profile(rows, columns, max_samples) {

                this.samples = [];    
                clearInterval(this.timerId);

                theTable.unload();
                theTable.load( Array.from({length: rows}, _ => [Math.random()]) );

                //this will force a recalc
                column_reference.value = columns;

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            },

            calculate(max_samples){

                //this will force a recalculation
                let mark = window.performance.now();

                theTable.calculate();

                this.samples.push([window.performance.now() - mark]);

                if( this.samples.length > max_samples){

                    this.samples.shift();
                }

                drawChart();

                this.timerId = window.setTimeout( 
                                            (obj) => obj.calculate(max_samples), 
                                            200,
                                            this
                                );
            }
        });

        //https://developers.google.com/chart/interactive/docs/gallery/histogram
    });

    google.charts.load("current", {packages:["corechart"]});
    google.charts.setOnLoadCallback(drawChart);

    var options = {
        legend: { position: 'none' },
        colors: ['#4285F4'],

        chartArea: { width: '90%' },
        hAxis: {
            viewWindowMode: 'pretty',
            title: 'execution time in ms',
            format: '#.#',
            slantedTextAngle : 75,
            textStyle: {
                fontSize: 12
            },
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        vAxis :{
            title: 'count',
            titleTextStyle: {
                italic: false,
                fontSize: 14
            }
        },
        bar: { gap: 0 },

        histogram: {
            bucketSize: 0.01,
            maxNumBuckets: 100,
            minValue: 0,
            maxValue: 1
        }
    };

    function drawChart() {
        /*        
        https://developers-dot-devsite-v2-prod.appspot.com/chart/interactive/docs/gallery/histogram_f074295fabe49e9cdca3f755b6d6058a2370c392cadbdfa48e4920592cd1e2e9.frame
        https://developers.google.com/chart/interactive/docs/gallery/histogram
        */        

        var data = new google.visualization.DataTable();

        data.addColumn('number', 'Time(ms)');
        data.addRows( Alpine.store('noSheetTable')?.samples??[] );

        var chart = new google.visualization.Histogram(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
});       

</script>

<div class="min-h-screen">
<div class="container mx-auto w-full h-full">
    <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">

        <h2>Stress Test</h2>

        <span x-data="{rows:1000, columns:100, samples:1000}">
            <div class="grid grid-cols-2 gap-4 justify-items-auto w-full">

                <div class="flex px-4">
                    <div>
                        <label for="columns">Columns:</label>
                        <input id="columns" x-model.number="columns" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                        <label for="rows">Rows:</label>
                        <input id="rows" x-model.number="rows" type="number" min="1" class="text-right w-14 border-gray-200 border-2">            
                    </div>
                </div>

                <div class="flex px-4">
                    <label for="samples">Max Samples:</label>
                    <input id="samples" x-model.number="samples" type="number" min="1" class="text-right w-18 border-gray-200 border-2">            
                    &nbsp;
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold px-4 rounded" x-data="{title: 'Start'}" @click="$store.noSheetTable.profile(rows, columns, samples); title='Restart';" x-text="title"></button>                        
                </div>
            </div>        
        </span>

        <div class="container mx-auto w-full h-full">

            <h3 class="text-center">Performance Histogram</h3>                        
            <div id="chart_div"></div>
        </div>

        <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">let</span> <span class="nx">stress_table</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">                        <span class="p">[</span><span class="s1">&#39;seed&#39;</span><span class="p">],</span> 
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">                        <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>                                    
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">                            <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">columns</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">                                <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">seed</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">refs</span><span class="p">.</span><span class="nx">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">                    <span class="p">);</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nx">stress_table</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div>
    </div>
</div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>


]]></content:encoded></item><item>
      <title>What The Diff?</title>
      <link>http://localhost:1313/pages/what-the-diff/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/pages/what-the-diff/</guid>
      <description>&lt;p&gt;NoSheet is not a direct analogue of a spreadsheet library, here are the main differences:&lt;/p&gt;&#xA;&lt;h2 id=&#34;think-in-terms-of-tables-and-aggregates&#34;&gt;Think in terms of tables and aggregates&lt;/h2&gt;&#xA;&lt;p&gt;Spreadsheets ask you to put your formulas in a 2D grid of cells indexed by rows and columns. Beyond this you are free to layout your worksheet however you want.&lt;/p&gt;&#xA;&lt;p&gt;noSheet works with tables of data where a formula defines the calculation for each element in a column. Tables can have aggregates (or more generally fields) defined by functions that have access to all the rows in the table.&lt;/p&gt;&#xA;&lt;h2 id=&#34;its-all-javascript-baby&#34;&gt;It&amp;rsquo;s all JavaScript Baby!&lt;/h2&gt;&#xA;&lt;p&gt;Your formulas are all defined as JavaScript arrow functions.&lt;/p&gt;</description><content:encoded><![CDATA[<p>NoSheet is not a direct analogue of a spreadsheet library, here are the main differences:</p>
<h2 id="think-in-terms-of-tables-and-aggregates">Think in terms of tables and aggregates</h2>
<p>Spreadsheets ask you to put your formulas in a 2D grid of cells indexed by rows and columns. Beyond this you are free to layout your worksheet however you want.</p>
<p>noSheet works with tables of data where a formula defines the calculation for each element in a column. Tables can have aggregates (or more generally fields) defined by functions that have access to all the rows in the table.</p>
<h2 id="its-all-javascript-baby">It&rsquo;s all JavaScript Baby!</h2>
<p>Your formulas are all defined as JavaScript arrow functions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span></code></pre></div><h2 id="bring-your-own-excel-formulas">Bring Your Own Excel Formulas</h2>
<p>There are no built-in Excel functions. Your formulas can do anything JavaScript can do and you can use any of the other Excel-lent (sorry, couldn&rsquo;t resist) formula libraries out there.</p>
<h2 id="there-is-no-autocalculate">There is no &lsquo;autocalculate&rsquo;</h2>
<p>You tell noSheet when to recalculate.</p>
<h2 id="facets-functions-and-data">Facets, Functions and Data</h2>
<p>A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &lsquo;do a job&rsquo;, that &lsquo;job&rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.</p>
<p>As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">invoice</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This statement is executed for every row and will calculate the row subtotal.
</span></span></span><span class="line"><span class="cl"><span class="cm">    The subtotal column doesn&#39;t need to be defined prior to the facet being used - the new column
</span></span></span><span class="line"><span class="cl"><span class="cm">    will be automatically created and populated for each row.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">subtotal</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.
</span></span></span><span class="line"><span class="cl"><span class="cm">    It uses the &#39;column&#39; method of the context to get all the subtotal values from the rows as an array 
</span></span></span><span class="line"><span class="cl"><span class="cm">    and then passes them to a &#39;SUM&#39; function.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &lsquo;gross margin&rsquo; facet from your library.</p>
<h2 id="precedents-and-dependents">Precendents and Dependents</h2>
<p>As the formulas are defined in JavaScript they aren&rsquo;t parsed by noSheet (why do a job already being done by the compiler?) and consequently no start-up heavy calculation dependency tree is built.</p>
<p>noSheet does however, due to the way facets are executed, enforce formula precedency by making sure that any terms (column names, aggregates/table fields) used in the table facets have a prior definition.</p>
<h3 id="execution-order">Execution Order</h3>
<p>Facets are executed in the order passed to the <code>createTable</code> function, and, as they are JavaScript functions the formulas within are executed sequentially as defined:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//This facet is executed second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">e</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">d</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//3rd formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//This facet is executed last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">f</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">e</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//4th formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//This facet is executed first because it is first in the parameter list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">a</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>    <span class="c1">//first formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">row</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//2nd formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet1</span><span class="p">,</span> <span class="nx">facet2</span><span class="p">,</span> <span class="nx">facet3</span><span class="p">),</span>
</span></span></code></pre></div><p>So, for instance, you couldn&rsquo;t define a facet like the one below as <code>delivery</code> is not defined prior to its use:</p>
<p>This will throw an error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span></code></pre></div><p>This won&rsquo;t:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span></code></pre></div><p>Similary, this will throw an error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>                 
</span></span><span class="line"><span class="cl">                    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet1</span><span class="p">,</span> <span class="nx">facet2</span><span class="p">),</span>                
</span></span></code></pre></div><p>This won&rsquo;t:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet2</span><span class="p">,</span> <span class="nx">facet1</span><span class="p">),</span>                
</span></span></code></pre></div><h2 id="brute-force-calculations">Brute Force Calculations</h2>
<p>noSheet deliberately eschews expensive formula parsing to build dependency trees in order to be as simple as possible.</p>
<p>This means that when a data point is changed the entire noSheet table is recalculated (in fact you will need to tell noSheet when to recalculate most of the time).</p>
<p>This is by design and it means that no matter what is changed within your data (and where it is changed) you can be sure of a consistent execution time frame.</p>
<p>This is particulary important for the web where you don&rsquo;t want your spreadsheet to grind to halt just because a user happened to change that cell that almost every other calculation depends on.</p>
]]></content:encoded></item><item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;NoSheet&lt;/p&gt;</description><content:encoded><![CDATA[<p>NoSheet</p>
]]></content:encoded></item><item>
      <title></title>
      <link>http://localhost:1313/sources/home_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/sources/home_page/</guid>
      <description>&lt;p&gt;Well, the sales pitch has worked! Head on over to:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/examples&#34;&gt;Look at some examples&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pages/what-the-diff&#34;&gt;Go deeper into what the differences between noSheet and a spreadsheet library are&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pages/advanced-features&#34;&gt;A brief discussion of some advanced features&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The documentation&lt;/p&gt;&#xA;&lt;h2 id=&#34;im-still-reading-whats-the-catch&#34;&gt;I&amp;rsquo;m still reading, What&amp;rsquo;s the catch?&lt;/h2&gt;&#xA;&lt;p&gt;Well good for you&amp;hellip; noSheet is not a drop in replacement. It does work differently to a spreadsheet in that it expects you to work with tables (much like a database) and it&amp;rsquo;s not meant to parse or work with Excel formulas (although as in the example above it&amp;rsquo;s possible to use Excel formula libraries like &lt;a href=&#34;https://formulajs.info/&#34;&gt;Formula.js&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s also not a spreadsheet UI/UX; it&amp;rsquo;s a way to simplify the handling of calculations in code that are generally table-like by providing flexibility and readability.&lt;/p&gt;</description><content:encoded><![CDATA[<p>Well, the sales pitch has worked! Head on over to:</p>
<p><a href="/examples">Look at some examples</a></p>
<p><a href="/pages/what-the-diff">Go deeper into what the differences between noSheet and a spreadsheet library are</a></p>
<p><a href="/pages/advanced-features">A brief discussion of some advanced features</a></p>
<p>The documentation</p>
<h2 id="im-still-reading-whats-the-catch">I&rsquo;m still reading, What&rsquo;s the catch?</h2>
<p>Well good for you&hellip; noSheet is not a drop in replacement. It does work differently to a spreadsheet in that it expects you to work with tables (much like a database) and it&rsquo;s not meant to parse or work with Excel formulas (although as in the example above it&rsquo;s possible to use Excel formula libraries like <a href="https://formulajs.info/">Formula.js</a>).</p>
<p>It&rsquo;s also not a spreadsheet UI/UX; it&rsquo;s a way to simplify the handling of calculations in code that are generally table-like by providing flexibility and readability.</p>
<p>Take a look at the <a href="/pages/what-the-diff">differences between noSheet and a spreadsheet</a></p>
]]></content:encoded></item></channel>
</rss>
