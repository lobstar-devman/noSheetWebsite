<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss
  version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pages on NoSheet</title>
    <link>http://localhost:1313/noSheetWebsite/pages/</link>
    <description>Recent content in Pages on NoSheet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Jun 2025 19:09:31 +0100</lastBuildDate><atom:link href="http://localhost:1313/noSheetWebsite/pages/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Advanced Features</title>
      <link>http://localhost:1313/noSheetWebsite/pages/advanced-features/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/pages/advanced-features/</guid>
      <description>&lt;h2 id=&#34;facets&#34;&gt;Facets&lt;/h2&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &lt;p&gt;A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &amp;lsquo;do a job&amp;rsquo;, that &amp;lsquo;job&amp;rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.&lt;/p&gt;&#xA;&lt;p&gt;As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;invoice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    This statement is executed for every row and will calculate the row subtotal.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    The subtotal column doesn&amp;#39;t need to be defined prior to the facet being used - the new column&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    will be automatically created and populated for each row.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subtotal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quantity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    It uses the &amp;#39;column&amp;#39; method of the context to get all the subtotal values from the rows as an array &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    and then passes them to a &amp;#39;SUM&amp;#39; function.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;grand_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;subtotal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &amp;lsquo;gross margin&amp;rsquo; facet from your library.&lt;/p&gt;</description><content:encoded><![CDATA[<h2 id="facets">Facets</h2>




    
    <p>A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &lsquo;do a job&rsquo;, that &lsquo;job&rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.</p>
<p>As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">invoice</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This statement is executed for every row and will calculate the row subtotal.
</span></span></span><span class="line"><span class="cl"><span class="cm">    The subtotal column doesn&#39;t need to be defined prior to the facet being used - the new column
</span></span></span><span class="line"><span class="cl"><span class="cm">    will be automatically created and populated for each row.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">subtotal</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.
</span></span></span><span class="line"><span class="cl"><span class="cm">    It uses the &#39;column&#39; method of the context to get all the subtotal values from the rows as an array 
</span></span></span><span class="line"><span class="cl"><span class="cm">    and then passes them to a &#39;SUM&#39; function.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &lsquo;gross margin&rsquo; facet from your library.</p>

<p>Read about what the differences between noSheet and a spreadsheet library are <a href="/pages/what-the-diff">here</a>.</p>
<h2 id="data-populations">Data Populations</h2>
<p>Rows within a noSheet table exist in populations, if you don&rsquo;t define a population when you load data, it will be assigned to the <code>default</code> population</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s1">&#39;lineitems&#39;</span> <span class="cm">/*define the population for these rows*/</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="what-are-populations-for">What are populations for?</h3>
<p>Populations give you a finer grained way of manipulating data in the table by:</p>
<ul>
<li>Loading / unloading data before a calculation is done using <a href="#hooks">hooks</a>.</li>
<li>Querying rows by populations in facets using the <a href="#columns">columns</a> method.</li>
</ul>
<h2 id="columns">Querying table rows</h2>
<p>You can use the <code>column</code>/<code>columns</code> context method inside facets to query data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;column1&#39;</span><span class="p">,</span> <span class="s1">&#39;column2&#39;</span><span class="p">));</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The <code>columns(s)</code> context methods will verify the column parameters to make sure that you are not selecting from columns that haven&rsquo;t been calculated yet <a href="/pages/what-the-diff#">see formula precedents and dependants</a></p>
<p>The <code>column</code>/<code>columns</code> methods have a basic psuedo SQL SELECT fluent syntax allowing you select:</p>
<ul>
<li><strong>from</strong> one or more populations</li>
<li><strong>where</strong> you can define your own filter conditions</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">de_minimis</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">).</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;imported&#39;</span><span class="p">).</span><span class="nx">where</span><span class="p">(</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">value</span> <span class="o">&lt;=</span> <span class="mi">800</span> <span class="p">)</span> <span class="p">);</span>      
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="stacks">Stacks</h2>
<p>You can define a stack of tables using the <code>defineStack</code> function.</p>
<p>A stack is a group of tables that all share the same facets but which have different data.</p>
<p>When you add tables to a stack you can identity them with tags:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site1&#39;</span><span class="p">,</span> <span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site2&#39;</span><span class="p">,</span> <span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site3&#39;</span><span class="p">,</span> <span class="s1">&#39;west&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p>By using a stack and table tags you can:</p>
<ul>
<li>Dynamically add/remove tables</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">invoice_4</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;site4&#39;</span><span class="p">,</span> <span class="s1">&#39;south&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">).</span><span class="nx">detach</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>Query table aggregate data</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"> <span class="c1">//return an array of grand_total aggregates for all the tables tagged with &#39;west&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">grand_totals</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;west&#39;</span><span class="p">).</span><span class="nx">aggregates</span><span class="p">(</span><span class="s1">&#39;grand_total&#39;</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>Selectively calculate tables</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">).</span><span class="nx">calculate</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>Selectively consolidate tables</li>
</ul>
<h2 id="consolidation">Consolidation</h2>
<p>A stack gives you ability to consolidate tables using facets.</p>
<p>Lets say you have stack of multiple invoices:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">defineStack</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_1</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_2</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;east&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">invoice_3</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="s1">&#39;west&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">stack</span><span class="p">.</span><span class="nx">addFacets</span><span class="p">(</span><span class="nx">invoice</span><span class="p">);</span>
</span></span></code></pre></div><p>You consolidation facets could look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Consolidate table stack invoices
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param {*} columns   Table columns query object
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">all_invoices</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">all_invoices</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">calculate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">east</span>  <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">aggregates</span><span class="p">([</span><span class="s1">&#39;east&#39;</span><span class="p">]).</span><span class="nx">total</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">west</span>  <span class="o">=</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">aggregates</span><span class="p">([</span><span class="s1">&#39;west&#39;</span><span class="p">]).</span><span class="nx">total</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="references">References</h2>
<p>References allow you to define facets that require external data in order to function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">currency_exchange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">Euro</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">USD</span> <span class="o">*</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">exchange_rate</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">order</span> <span class="o">=</span> <span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="s1">&#39;cost&#39;</span><span class="p">],</span> <span class="nx">invoice</span><span class="p">,</span> <span class="nx">currency_exchange</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">order</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Define a &#39;pull&#39; reference that will be used whenever the facet is calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="mf">0.87</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div><p>References can also be &lsquo;push&rsquo; references that force a table recalculation whenever they are changed</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">handle</span> <span class="o">=</span> <span class="nx">order</span><span class="p">.</span><span class="nx">getReferenceHandle</span><span class="p">(</span><span class="s1">&#39;exchange_rate&#39;</span><span class="p">,</span> <span class="mf">0.87</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">handle</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="mf">0.88</span><span class="p">;</span> <span class="c1">//this statement will force a recalculation of the order table
</span></span></span></code></pre></div><h3 id="table-references">Table references</h3>
<p>References can also be aggregates from other tables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">order</span><span class="p">.</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//define a reference based on another tables aggregate, if the &#39;another_no_sheet_table&#39; is recalculated then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//the order table will be recalculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">another_no_sheet_table</span><span class="p">).</span><span class="nx">average_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="stack-references">Stack References</h3>
<p>Stacks can have default references which can then be overriden based on table tags:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//This default reference will be used by all tables - even tables added to the stack later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">setDefaultReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">another_no_sheet_table</span><span class="p">).</span><span class="nx">average_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Any table tagged with &#39;old-invoices&#39; will now use a different exchange rate reference in it&#39;s facet calculations.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">(</span><span class="s1">&#39;old-invoices&#39;</span><span class="p">).</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">exchange_rate</span> <span class="o">=</span> <span class="nx">old_exchange_rate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>    
</span></span></code></pre></div><h3 id="consolidation-references">Consolidation references</h3>
<p>Consolidations facets can use references too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">all_invoices</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">refs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">total</span>  <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="p">...</span><span class="nx">columns</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="o">*</span> <span class="nx">refs</span><span class="p">.</span><span class="nx">markup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">all_invoices</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">setConsolidationReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">markup</span> <span class="o">=</span> <span class="mf">1.25</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>Facets can reference consolidation aggregates</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">consolidate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tables</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span> <span class="nx">tables</span><span class="p">.</span><span class="nx">total</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack1</span><span class="p">.</span><span class="nx">consolidate</span><span class="p">(</span><span class="nx">consolidate</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">stack2</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">setReferences</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uses</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">reference</span> <span class="o">=</span> <span class="nx">uses</span><span class="p">(</span><span class="nx">stack1</span><span class="p">).</span><span class="nx">grand_total</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>      
</span></span></code></pre></div><h2 id="hooks">Hooks</h2>
<p>You can define hooks on tables or stacks that get called:</p>
<h3 id="before-or-after-calculations">Before or After Calculations</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">aTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">afterCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">tables</span><span class="p">().</span><span class="nx">afterCalculate</span><span class="p">(</span> <span class="nx">aTable</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span></code></pre></div><p><code>beforeCalculate</code> hooks are good becuase they allow you to preprocess the table data before each calculation, as an example consider a Bill Of Materials where you may need to add/remove additional rows based on the data in the table:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">table</span><span class="p">.</span><span class="nx">beforeCalculate</span><span class="p">(</span> <span class="nx">theTable</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//remove all rows in the &#39;fixings&#39; population
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">theTable</span><span class="p">.</span><span class="nx">unload</span><span class="p">(</span><span class="s1">&#39;fixings&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//find all quantities where the length of any entry in the &#39;panels&#39; population is greater than 1200mm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//and add in a matching row for fixings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">theTable</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">&#39;quantity&#39;</span><span class="p">).</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;panels&#39;</span><span class="p">).</span><span class="nx">where</span><span class="p">(</span> <span class="nx">r</span> <span class="p">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1200</span> <span class="p">).</span><span class="nx">forEach</span><span class="p">(</span> <span class="p">(</span><span class="nx">quantity</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">theTable</span><span class="p">.</span><span class="nx">load</span><span class="p">([[</span><span class="s1">&#39;sku001&#39;</span><span class="p">,</span> <span class="nx">quantity</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">]],</span> <span class="s1">&#39;fixings&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="before-and-after-consolidation">Before and After Consolidation</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">beforeConsolidation</span><span class="p">(</span> <span class="nx">theStack</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>        
</span></span><span class="line"><span class="cl"><span class="nx">stack</span><span class="p">.</span><span class="nx">afterConsolidation</span><span class="p">(</span> <span class="nx">theStack</span> <span class="p">=&gt;</span> <span class="p">...</span> <span class="p">);</span>
</span></span></code></pre></div>]]></content:encoded></item><item>
      <title>Roadmap</title>
      <link>http://localhost:1313/noSheetWebsite/pages/roadmap/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/pages/roadmap/</guid>
      <description>&lt;h2 id=&#34;v08-initial-release&#34;&gt;v0.8 Initial Release&lt;/h2&gt;&#xA;&lt;h4 id=&#34;-you-are-here&#34;&gt;&amp;laquo;&amp;laquo; You are here&lt;/h4&gt;&#xA;&lt;h3 id=&#34;v09-back-end-examples&#34;&gt;v0.9 Back-end examples&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a few backend examples using the latest shiny framework.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;v10-production-release&#34;&gt;v1.0 Production release&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Have noSheet running on a live site other than the example and test spec pages.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;v11-consolidation-tweaks&#34;&gt;v1.1 Consolidation tweaks&lt;/h3&gt;&#xA;&lt;h3 id=&#34;v12-table-data-manipulation&#34;&gt;v1.2 Table data manipulation&lt;/h3&gt;</description><content:encoded><![CDATA[<h2 id="v08-initial-release">v0.8 Initial Release</h2>
<h4 id="-you-are-here">&laquo;&laquo; You are here</h4>
<h3 id="v09-back-end-examples">v0.9 Back-end examples</h3>
<ul>
<li>Add a few backend examples using the latest shiny framework.</li>
</ul>
<h2 id="v10-production-release">v1.0 Production release</h2>
<ul>
<li>Have noSheet running on a live site other than the example and test spec pages.</li>
</ul>
<h3 id="v11-consolidation-tweaks">v1.1 Consolidation tweaks</h3>
<h3 id="v12-table-data-manipulation">v1.2 Table data manipulation</h3>
]]></content:encoded></item><item>
      <title>What The Diff?</title>
      <link>http://localhost:1313/noSheetWebsite/pages/what-the-diff/</link>
      <pubDate>Wed, 11 Jun 2025 19:09:31 +0100</pubDate><guid>http://localhost:1313/noSheetWebsite/pages/what-the-diff/</guid>
      <description>&lt;p&gt;NoSheet is not a direct analogue of a spreadsheet library, here are the main differences:&lt;/p&gt;&#xA;&lt;h2 id=&#34;think-in-terms-of-tables-and-aggregates&#34;&gt;Think in terms of tables and aggregates&lt;/h2&gt;&#xA;&lt;p&gt;Spreadsheets ask you to put your formulas in a 2D grid of cells indexed by rows and columns. Beyond this you are free to layout your worksheet however you want.&lt;/p&gt;&#xA;&lt;p&gt;noSheet works with tables of data where a formula defines the calculation for each element in a column. Tables can have aggregates (or more generally fields) defined by functions that have access to all the rows in the table.&lt;/p&gt;&#xA;&lt;h2 id=&#34;its-all-javascript-baby&#34;&gt;It&amp;rsquo;s all JavaScript Baby!&lt;/h2&gt;&#xA;&lt;p&gt;Your formulas are all defined as JavaScript arrow functions.&lt;/p&gt;</description><content:encoded><![CDATA[<p>NoSheet is not a direct analogue of a spreadsheet library, here are the main differences:</p>
<h2 id="think-in-terms-of-tables-and-aggregates">Think in terms of tables and aggregates</h2>
<p>Spreadsheets ask you to put your formulas in a 2D grid of cells indexed by rows and columns. Beyond this you are free to layout your worksheet however you want.</p>
<p>noSheet works with tables of data where a formula defines the calculation for each element in a column. Tables can have aggregates (or more generally fields) defined by functions that have access to all the rows in the table.</p>
<h2 id="its-all-javascript-baby">It&rsquo;s all JavaScript Baby!</h2>
<p>Your formulas are all defined as JavaScript arrow functions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">unit_cost</span><span class="p">;</span>    
</span></span></code></pre></div><h2 id="bring-your-own-excel-formulas">Bring Your Own Excel Formulas</h2>
<p>There are no built-in Excel functions. Your formulas can do anything JavaScript can do and you can use any of the other Excel-lent (sorry, couldn&rsquo;t resist) formula libraries out there.</p>
<h2 id="there-is-no-autocalculate">There is no &lsquo;autocalculate&rsquo;</h2>
<p>You tell noSheet when to recalculate.</p>
<h2 id="facets-functions-and-data">Facets, Functions and Data</h2>
<p>A facet is a collection of formulas. The formulas in a facet will form a library of calculations that &lsquo;do a job&rsquo;, that &lsquo;job&rsquo; may involve calculating new column entries from the table data and/or aggregating the table data.</p>
<p>As an example, consider an invoice, it will have at least three columns; item, quantity, cost. In your library of facets you may have an invoice facet that calculates the subtotal of each line (quantity * cost) and finally a table aggregate that adds all the subtotals to give a grand total.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">invoice</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This statement is executed for every row and will calculate the row subtotal.
</span></span></span><span class="line"><span class="cl"><span class="cm">    The subtotal column doesn&#39;t need to be defined prior to the facet being used - the new column
</span></span></span><span class="line"><span class="cl"><span class="cm">    will be automatically created and populated for each row.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">subtotal</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    This is a table aggregate, it is only calculated once after all rows have had their subtotal calculated.
</span></span></span><span class="line"><span class="cl"><span class="cm">    It uses the &#39;column&#39; method of the context to get all the subtotal values from the rows as an array 
</span></span></span><span class="line"><span class="cl"><span class="cm">    and then passes them to a &#39;SUM&#39; function.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="nx">table</span><span class="p">.</span><span class="nx">grand_total</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">SUM</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;subtotal&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A table may use multiple facets from your library. In this way you can mix and match the facets used to do calculations that is task dependent. So, if for instance, you want to see the gross margins for your invoice you can simply add the &lsquo;gross margin&rsquo; facet from your library.</p>
<h2 id="precedents-and-dependents">Precendents and Dependents</h2>
<p>As the formulas are defined in JavaScript they aren&rsquo;t parsed by noSheet (why do a job already being done by the compiler?) and consequently no start-up heavy calculation dependency tree is built.</p>
<p>noSheet does however, due to the way facets are executed, enforce formula precedency by making sure that any terms (column names, aggregates/table fields) used in the table facets have a prior definition.</p>
<h3 id="execution-order">Execution Order</h3>
<p>Facets are executed in the order passed to the <code>createTable</code> function, and, as they are JavaScript functions the formulas within are executed sequentially as defined:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//This facet is executed second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">e</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">d</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//3rd formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//This facet is executed last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">f</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">e</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//4th formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//This facet is executed first because it is first in the parameter list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">a</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>    <span class="c1">//first formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">row</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>        <span class="c1">//2nd formula calculated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet1</span><span class="p">,</span> <span class="nx">facet2</span><span class="p">,</span> <span class="nx">facet3</span><span class="p">),</span>
</span></span></code></pre></div><p>So, for instance, you couldn&rsquo;t define a facet like the one below as <code>delivery</code> is not defined prior to its use:</p>
<p>This will throw an error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span></code></pre></div><p>This won&rsquo;t:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span></code></pre></div><p>Similary, this will throw an error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                    <span class="nx">row</span><span class="p">.</span><span class="nx">total</span>    <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">*</span> <span class="nx">row</span><span class="p">.</span><span class="nx">cost</span><span class="p">)</span> <span class="o">+</span> <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">facet2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="nx">row</span><span class="p">)</span> <span class="p">{</span>                 
</span></span><span class="line"><span class="cl">                    <span class="nx">row</span><span class="p">.</span><span class="nx">delivery</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">lookup</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">country_code</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet1</span><span class="p">,</span> <span class="nx">facet2</span><span class="p">),</span>                
</span></span></code></pre></div><p>This won&rsquo;t:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">createTable</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">facet2</span><span class="p">,</span> <span class="nx">facet1</span><span class="p">),</span>                
</span></span></code></pre></div><h2 id="brute-force-calculations">Brute Force Calculations</h2>
<p>noSheet deliberately eschews expensive formula parsing to build dependency trees in order to be as simple as possible.</p>
<p>This means that when a data point is changed the entire noSheet table is recalculated (in fact you will need to tell noSheet when to recalculate most of the time).</p>
<p>This is by design and it means that no matter what is changed within your data (and where it is changed) you can be sure of a consistent execution time frame.</p>
<p>This is particulary important for the web where you don&rsquo;t want your spreadsheet to grind to halt just because a user happened to change that cell that almost every other calculation depends on.</p>
]]></content:encoded></item></channel>
</rss>
